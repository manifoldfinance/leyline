{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IdenticalAddresses",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientOutputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPath",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IOpenMevRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        }
      ],
      "name": "swapAndStakeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        }
      ],
      "name": "swapETHAndStakeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "desiredToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "desiredTokenOutMin",
          "type": "uint256"
        }
      ],
      "name": "withdrawLiquidityAndSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": {
    "object": "0x60a03461008157601f61175238819003918201601f19168301916001600160401b038311848410176100865780849260209460405283398101031261008157516001600160a01b03811690819003610081576080526040516116b5908161009d82396080518181816101e701528181610518015281816108110152610b1e0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004908136101561002a575b505050361561002057600080fd5b610028610b4d565b005b600090813560e01c93846364551df31461008a57505050508063942f0c2714610081578063ef409f90146100785763f887ea401461006b575b388080610012565b610073610b07565b610063565b506100736106a2565b506100736103d8565b346103be57806003193601126103be578335936100a6856103c2565b6024356100b2816103c2565b6044356107d081106103b057636eb1769f60e11b8452336084523060a4526020936001600160a01b03908882169083908781604481865afa9081156103a3575b8a91610377575b5010610367578461010a858b61129f565b938385169a60608c8b5194858092630240bc6b60e21b82525afa92831561035a575b8b908c94610326575b506001600160701b0380911693169480881695868610600014610311576101679061016086866114f2565b9586611425565b975b60643589106103015785886102919f98938f9d9c98978f978f8f9e998161026f9f9a808f9161024d9f8f61022b8a976102489f896102429e6101e58e8c986101dc61020e966101d36101c49d6101bd610c6a565b9e8f610ca5565b6001600160a01b039091169052565b6101c48d610cc8565b309033906115e0565b7f0000000000000000000000000000000000000000000000000000000000000000168098610ec4565b516338ed173960e01b815297889687958694429330938701610d94565b03925af180156102f4575b6102d1575b5050610d03565b9161166e565b61166e565b86516335313c2160e11b81523391810191825295869384928391602090910190565b03925af19384156102c4575b93610295575b5050519081529081906020820190565b0390f35b6102b5929350803d106102bd575b6102ad8183610bdb565b810190610c34565b908380610281565b503d6102a3565b6102cc610c15565b61027b565b6102ec913d8091833e6102e48183610bdb565b810190610d1a565b508f3861023b565b6102fc610c15565b610236565b8b516342301c2360e01b81528a90fd5b936103209061016086866114f2565b97610169565b905061034a91935060603d8111610353575b6103428183610bdb565b810190611269565b5092908d610135565b503d610338565b610362610c15565b61012c565b86516313be252b60e01b81528590fd5b610395915088903d8a1161039b575b61038f82610bb8565b01610c22565b8b6100f9565b3d9150610386565b6103ab610c15565b6100f2565b638dc525d160e01b84528284fd5b8280fd5b6001600160a01b038116036103d357565b600080fd5b506040806003193601126103d35760048035916103f4836103c2565b6107d034106106955761040683611355565b8151630240bc6b60e21b815290936001600160a01b0393909190848616906060838281855afa928315610688575b6000908194610664575b50848716976001600160701b039182169473c02aaa39b223fe8d0a0e5c4f27ead9083c756cc292168983101561064f576104839061047c87346114f2565b9687611425565b905b602435821061063f576104c8610499610c6a565b976104bf6104a68a610ca5565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29052565b6101c489610cc8565b823b156103d357610291996102486105796105a198610562600087819f8f9060209f84908e928361057f9f8490875192838092630d0e30db60e41b825234905af18015610632575b610619575b507f000000000000000000000000000000000000000000000000000000000000000016936105438986610dfe565b516338ed173960e01b815296879586948593429230928d908701610d94565b03925af1801561060c575b6105f1575b5034610d03565b83611620565b84516335313c2160e11b81523391810191825295869384928391602090910190565b03925af19182156105e4575b6000926105c4575b50519081529081906020820190565b6105dd91925060203d81116102bd576102ad8183610bdb565b90386105b5565b6105ec610c15565b6105ad565b610605903d8f8190833e6102e48183610bdb565b5038610572565b610614610c15565b61056d565b8061062661062c92610b97565b80610afc565b38610515565b61063a610c15565b610510565b87516342301c2360e01b81528490fd5b9461065e9061047c87346114f2565b90610485565b905061067f91935060603d8111610353576103428183610bdb565b5092903861043e565b610690610c15565b610434565b51638dc525d160e01b8152fd5b50346103d35760803660031901126103d357600480356106c1816103c2565b60243590604435906106d2826103c2565b60408051630dfe168160e01b815290936001600160a01b0383811694602094919390926064359286838b818b5afa928315610aef575b600093610ad0575b50885163d21220a760e01b81529187838c818c5afa928315610ac3575b600093610a94575b50868616988a8c8b8a8816141580610a88575b610a7a579051636eb1769f60e11b81523391810191825230602083015283918b90829081906040010381865afa908115610a6d575b600091610a50575b5010610a4057926107b56102919c96936107ae61090b9c9a97946107e29c9a97309033906115e0565b3090610f29565b8085168803610a385750925b6107c9610c6a565b9788936107d9866101c487610ca5565b6101c485610cc8565b6107fb6107ee84610ca5565b516001600160a01b031690565b8a516370a0823160e01b808252308883019081527f0000000000000000000000000000000000000000000000000000000000000000851697909416949093909261086792918891908b908490819060200103818a5afa928315610a2b575b600093610a0c575b50610ec4565b8a5182815230878201908152600099918d918a90829081906020010381865afa9081156109ff575b8b916109e2575b508311610971575b51928352505030858201908152909186918391908290819060200103915afa948515610964575b600095610942575b505060008094956108f58a51978896879586946338ed173960e01b8652429330938701610d94565b03925af18015610935575b61091a575b506110a0565b90519081529081906020820190565b61092e903d806000833e6102e48183610bdb565b5038610905565b61093d610c15565b610900565b6000955085918161095e92903d106102bd576102ad8183610bdb565b946108cd565b61096c610c15565b6108c5565b5183815230818901908152939989946109ad94919391929186918391908290819060200103915afa9283156109d5575b926109b6575b50610d03565b9690388b61089e565b6109ce919250843d86116102bd576102ad8183610bdb565b90386109a7565b6109dd610c15565b6109a1565b6109f991508a3d8c116102bd576102ad8183610bdb565b38610896565b610a07610c15565b61088f565b610a249193508b3d8d116102bd576102ad8183610bdb565b9138610861565b610a33610c15565b610859565b9050926107c1565b8a516313be252b60e01b81528c90fd5b610a6791508b3d8d116102bd576102ad8183610bdb565b38610785565b610a75610c15565b61077d565b90516320db826760e01b8152fd5b508b8a87161415610748565b610ab5919350883d8a11610abc575b610aad8183610bdb565b810190610bfd565b9138610735565b503d610aa3565b610acb610c15565b61072d565b610ae8919350873d8911610abc57610aad8183610bdb565b9138610710565b610af7610c15565b610708565b60009103126103d357565b50346103d35760003660031901126103d3576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc23303610b6a57565b634e487b7160e01b600052600160045260246000fd5b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610bab57604052565b610bb3610b80565b604052565b601f80199101166080016080811067ffffffffffffffff821117610bab57604052565b90601f8019910116810190811067ffffffffffffffff821117610bab57604052565b908160209103126103d35751610c12816103c2565b90565b506040513d6000823e3d90fd5b602090607f1901126103d35760805190565b908160209103126103d3575190565b60209067ffffffffffffffff8111610c5d575b60051b0190565b610c65610b80565b610c56565b604051906060820182811067ffffffffffffffff821117610c98575b60405260028252604082602036910137565b610ca0610b80565b610c86565b805115610cb25760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015610cb25760400190565b8051821015610cb25760209160051b010190565b50634e487b7160e01b600052601160045260246000fd5b818110610d0e570390565b610d16610cec565b0390565b60209081818403126103d35780519067ffffffffffffffff82116103d357019180601f840112156103d3578251610d5081610c43565b93610d5e6040519586610bdb565b818552838086019260051b8201019283116103d3578301905b828210610d85575050505090565b81518152908301908301610d77565b9291909594939560a084019084526020918285015260a0604085015282518091528160c0850193019160005b828110610de15750505050906080919460018060a01b031660608201520152565b83516001600160a01b031685529381019392810192600101610dc0565b604051636eb1769f60e11b81523060048201526001600160a01b038216602482015290919073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2908290602081604481865afa908115610eb7575b600091610e99575b5010610e5f57505050565b602092600060449281946040519363095ea7b360e01b8552600485015260248401525af13d15601f3d11600160005114161716156103d357565b610eb1915060203d81116102bd576102ad8183610bdb565b38610e54565b610ebf610c15565b610e4c565b604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015292939291909116908290602081604481865afa908115610eb757600091610e99575010610e5f57505050565b91908260409103126103d3576020825192015190565b604080516370a0823160e01b81523060048201526000939192610fa2926001600160a01b038216929091610f779190602082602481885afa91821561100c575b8892610fec575b508461166e565b835163226bf2d160e21b81526001600160a01b03909116600482015293849283919082906024820190565b03925af18015610fdf575b610fb45750565b610fd49060403d8111610fd8575b610fcc8183610bdb565b810190610f13565b5050565b503d610fc2565b610fe7610c15565b610fad565b61100591925060203d81116102bd576102ad8183610bdb565b9038610f70565b611014610c15565b610f69565b604051906000602083019280841067ffffffffffffffff851117611045575b8360405281815292369037565b61104d610b80565b611038565b3d1561109b573d9067ffffffffffffffff821161108e575b60405191611082601f8201601f191660200184610bdb565b82523d6000602084013e565b611096610b80565b61106a565b606090565b906000916000815181925b8184106110b85750505050565b90919294506110dc6110d06110d06107ee8885610cd8565b6001600160a01b031690565b604080516370a0823160e01b81523060048083019190915290979290919060209081908a9060249082905afa988915611248575b8799611229575b50888061112e575b505050506001019291906110ab565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2806001600160a01b036111596107ee898b610cd8565b160361120057803b156111fc5791816111918a809594819589838a51809681958294632e1a7d4d60e01b845283019190602083019252565b03925af180156111ef575b6111dc575b506111aa611019565b8051920190335af16111ba611052565b50156111cf5750506001905b9038808061111f565b516312171d8360e31b8152fd5b806106266111e992610b97565b386111a1565b6111f7610c15565b61119c565b8880fd5b509050839250611224915061121d6110d06107ee60019688610cd8565b339061166e565b6111c6565b81611241929a503d8b116102bd576102ad8183610bdb565b9738611117565b611250610c15565b611110565b51906001600160701b03821682036103d357565b908160609103126103d35761127d81611255565b91604061128c60208401611255565b92015163ffffffff811681036103d35790565b6001600160a01b0381811690831614611343578160601b8160601b1060001461133d575b801561132b576055916040519160601b825260601b601482015260288120743ff02bb91e38d9638984317de928b85ddf3a793cab605a1b825260158201527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c630360358201522090565b60405163d92e233d60e01b8152600490fd5b906112c3565b604051630bd969eb60e41b8152600490fd5b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b038216811461134357606082901b736015551cd911ff4685072e2793f56c841e3ab66160611b101561133d57801561132b576055916040519160601b825260601b601482015260288120743ff02bb91e38d9638984317de928b85ddf3a793cab605a1b825260158201527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c630360358201522090565b811561140f570490565b634e487b7160e01b600052601260045260246000fd5b9190918015611492576103e88084108015611489575b611477576103e583818402930202926114548385611405565b0361146557610c1293020190611405565b604051631a93c68960e11b8152600490fd5b60405163bb55fd2760e01b8152600490fd5b5080831061143b565b604051631f2a200560e01b8152600490fd5b6107cd9080600019048211811515166114bb570290565b6114c3610cec565b0290565b80600019048211811515166114bb570290565b811981116114e6570190565b6114ee610cec565b0190565b6115309061152a90623cda206000198215158382048311166115d3575b85623cda2991048111861515166115c6575b850291026114da565b826114c7565b90600060038311156115a757506001828181811c600119811161159a575b0191905b84831061157a57505050610c129161156c611572926114a4565b90610d03565b6107ca900490565b909193506115918461158c8184611405565b6114da565b821c9190611552565b6115a2610cec565b61154e565b61157291610c12936115bd575b61156c906114a4565b600191506115b4565b6115ce610cec565b611521565b6115db610cec565b61150f565b9060006064926020958295604051946323b872dd60e01b86526004860152602485015260448401525af13d15601f3d11600160005114161716156103d357565b60446000916020936040519163a9059cbb60e01b8352600483015260248201528273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25af13d15601f3d11600160005114161716156103d357565b600091826044926020956040519363a9059cbb60e01b8552600485015260248401525af13d15601f3d11600160005114161716156103d35756fea164736f6c634300080f000a",
    "sourceMap": "438:8314:14:-:0;;;;;;;;;;;;;-1:-1:-1;;438:8314:14;;;;-1:-1:-1;;;;;438:8314:14;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;438:8314:14;;;;;;;;901:32;;438:8314;;;;;;;;901:32;438:8314;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;438:8314:14;;;;;;-1:-1:-1;438:8314:14;;;;;-1:-1:-1;438:8314:14",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060408181526004908136101561002a575b505050361561002057600080fd5b610028610b4d565b005b600090813560e01c93846364551df31461008a57505050508063942f0c2714610081578063ef409f90146100785763f887ea401461006b575b388080610012565b610073610b07565b610063565b506100736106a2565b506100736103d8565b346103be57806003193601126103be578335936100a6856103c2565b6024356100b2816103c2565b6044356107d081106103b057636eb1769f60e11b8452336084523060a4526020936001600160a01b03908882169083908781604481865afa9081156103a3575b8a91610377575b5010610367578461010a858b61129f565b938385169a60608c8b5194858092630240bc6b60e21b82525afa92831561035a575b8b908c94610326575b506001600160701b0380911693169480881695868610600014610311576101679061016086866114f2565b9586611425565b975b60643589106103015785886102919f98938f9d9c98978f978f8f9e998161026f9f9a808f9161024d9f8f61022b8a976102489f896102429e6101e58e8c986101dc61020e966101d36101c49d6101bd610c6a565b9e8f610ca5565b6001600160a01b039091169052565b6101c48d610cc8565b309033906115e0565b7f0000000000000000000000000000000000000000000000000000000000000000168098610ec4565b516338ed173960e01b815297889687958694429330938701610d94565b03925af180156102f4575b6102d1575b5050610d03565b9161166e565b61166e565b86516335313c2160e11b81523391810191825295869384928391602090910190565b03925af19384156102c4575b93610295575b5050519081529081906020820190565b0390f35b6102b5929350803d106102bd575b6102ad8183610bdb565b810190610c34565b908380610281565b503d6102a3565b6102cc610c15565b61027b565b6102ec913d8091833e6102e48183610bdb565b810190610d1a565b508f3861023b565b6102fc610c15565b610236565b8b516342301c2360e01b81528a90fd5b936103209061016086866114f2565b97610169565b905061034a91935060603d8111610353575b6103428183610bdb565b810190611269565b5092908d610135565b503d610338565b610362610c15565b61012c565b86516313be252b60e01b81528590fd5b610395915088903d8a1161039b575b61038f82610bb8565b01610c22565b8b6100f9565b3d9150610386565b6103ab610c15565b6100f2565b638dc525d160e01b84528284fd5b8280fd5b6001600160a01b038116036103d357565b600080fd5b506040806003193601126103d35760048035916103f4836103c2565b6107d034106106955761040683611355565b8151630240bc6b60e21b815290936001600160a01b0393909190848616906060838281855afa928315610688575b6000908194610664575b50848716976001600160701b039182169473c02aaa39b223fe8d0a0e5c4f27ead9083c756cc292168983101561064f576104839061047c87346114f2565b9687611425565b905b602435821061063f576104c8610499610c6a565b976104bf6104a68a610ca5565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29052565b6101c489610cc8565b823b156103d357610291996102486105796105a198610562600087819f8f9060209f84908e928361057f9f8490875192838092630d0e30db60e41b825234905af18015610632575b610619575b507f000000000000000000000000000000000000000000000000000000000000000016936105438986610dfe565b516338ed173960e01b815296879586948593429230928d908701610d94565b03925af1801561060c575b6105f1575b5034610d03565b83611620565b84516335313c2160e11b81523391810191825295869384928391602090910190565b03925af19182156105e4575b6000926105c4575b50519081529081906020820190565b6105dd91925060203d81116102bd576102ad8183610bdb565b90386105b5565b6105ec610c15565b6105ad565b610605903d8f8190833e6102e48183610bdb565b5038610572565b610614610c15565b61056d565b8061062661062c92610b97565b80610afc565b38610515565b61063a610c15565b610510565b87516342301c2360e01b81528490fd5b9461065e9061047c87346114f2565b90610485565b905061067f91935060603d8111610353576103428183610bdb565b5092903861043e565b610690610c15565b610434565b51638dc525d160e01b8152fd5b50346103d35760803660031901126103d357600480356106c1816103c2565b60243590604435906106d2826103c2565b60408051630dfe168160e01b815290936001600160a01b0383811694602094919390926064359286838b818b5afa928315610aef575b600093610ad0575b50885163d21220a760e01b81529187838c818c5afa928315610ac3575b600093610a94575b50868616988a8c8b8a8816141580610a88575b610a7a579051636eb1769f60e11b81523391810191825230602083015283918b90829081906040010381865afa908115610a6d575b600091610a50575b5010610a4057926107b56102919c96936107ae61090b9c9a97946107e29c9a97309033906115e0565b3090610f29565b8085168803610a385750925b6107c9610c6a565b9788936107d9866101c487610ca5565b6101c485610cc8565b6107fb6107ee84610ca5565b516001600160a01b031690565b8a516370a0823160e01b808252308883019081527f0000000000000000000000000000000000000000000000000000000000000000851697909416949093909261086792918891908b908490819060200103818a5afa928315610a2b575b600093610a0c575b50610ec4565b8a5182815230878201908152600099918d918a90829081906020010381865afa9081156109ff575b8b916109e2575b508311610971575b51928352505030858201908152909186918391908290819060200103915afa948515610964575b600095610942575b505060008094956108f58a51978896879586946338ed173960e01b8652429330938701610d94565b03925af18015610935575b61091a575b506110a0565b90519081529081906020820190565b61092e903d806000833e6102e48183610bdb565b5038610905565b61093d610c15565b610900565b6000955085918161095e92903d106102bd576102ad8183610bdb565b946108cd565b61096c610c15565b6108c5565b5183815230818901908152939989946109ad94919391929186918391908290819060200103915afa9283156109d5575b926109b6575b50610d03565b9690388b61089e565b6109ce919250843d86116102bd576102ad8183610bdb565b90386109a7565b6109dd610c15565b6109a1565b6109f991508a3d8c116102bd576102ad8183610bdb565b38610896565b610a07610c15565b61088f565b610a249193508b3d8d116102bd576102ad8183610bdb565b9138610861565b610a33610c15565b610859565b9050926107c1565b8a516313be252b60e01b81528c90fd5b610a6791508b3d8d116102bd576102ad8183610bdb565b38610785565b610a75610c15565b61077d565b90516320db826760e01b8152fd5b508b8a87161415610748565b610ab5919350883d8a11610abc575b610aad8183610bdb565b810190610bfd565b9138610735565b503d610aa3565b610acb610c15565b61072d565b610ae8919350873d8911610abc57610aad8183610bdb565b9138610710565b610af7610c15565b610708565b60009103126103d357565b50346103d35760003660031901126103d3576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc23303610b6a57565b634e487b7160e01b600052600160045260246000fd5b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610bab57604052565b610bb3610b80565b604052565b601f80199101166080016080811067ffffffffffffffff821117610bab57604052565b90601f8019910116810190811067ffffffffffffffff821117610bab57604052565b908160209103126103d35751610c12816103c2565b90565b506040513d6000823e3d90fd5b602090607f1901126103d35760805190565b908160209103126103d3575190565b60209067ffffffffffffffff8111610c5d575b60051b0190565b610c65610b80565b610c56565b604051906060820182811067ffffffffffffffff821117610c98575b60405260028252604082602036910137565b610ca0610b80565b610c86565b805115610cb25760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015610cb25760400190565b8051821015610cb25760209160051b010190565b50634e487b7160e01b600052601160045260246000fd5b818110610d0e570390565b610d16610cec565b0390565b60209081818403126103d35780519067ffffffffffffffff82116103d357019180601f840112156103d3578251610d5081610c43565b93610d5e6040519586610bdb565b818552838086019260051b8201019283116103d3578301905b828210610d85575050505090565b81518152908301908301610d77565b9291909594939560a084019084526020918285015260a0604085015282518091528160c0850193019160005b828110610de15750505050906080919460018060a01b031660608201520152565b83516001600160a01b031685529381019392810192600101610dc0565b604051636eb1769f60e11b81523060048201526001600160a01b038216602482015290919073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2908290602081604481865afa908115610eb7575b600091610e99575b5010610e5f57505050565b602092600060449281946040519363095ea7b360e01b8552600485015260248401525af13d15601f3d11600160005114161716156103d357565b610eb1915060203d81116102bd576102ad8183610bdb565b38610e54565b610ebf610c15565b610e4c565b604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015292939291909116908290602081604481865afa908115610eb757600091610e99575010610e5f57505050565b91908260409103126103d3576020825192015190565b604080516370a0823160e01b81523060048201526000939192610fa2926001600160a01b038216929091610f779190602082602481885afa91821561100c575b8892610fec575b508461166e565b835163226bf2d160e21b81526001600160a01b03909116600482015293849283919082906024820190565b03925af18015610fdf575b610fb45750565b610fd49060403d8111610fd8575b610fcc8183610bdb565b810190610f13565b5050565b503d610fc2565b610fe7610c15565b610fad565b61100591925060203d81116102bd576102ad8183610bdb565b9038610f70565b611014610c15565b610f69565b604051906000602083019280841067ffffffffffffffff851117611045575b8360405281815292369037565b61104d610b80565b611038565b3d1561109b573d9067ffffffffffffffff821161108e575b60405191611082601f8201601f191660200184610bdb565b82523d6000602084013e565b611096610b80565b61106a565b606090565b906000916000815181925b8184106110b85750505050565b90919294506110dc6110d06110d06107ee8885610cd8565b6001600160a01b031690565b604080516370a0823160e01b81523060048083019190915290979290919060209081908a9060249082905afa988915611248575b8799611229575b50888061112e575b505050506001019291906110ab565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2806001600160a01b036111596107ee898b610cd8565b160361120057803b156111fc5791816111918a809594819589838a51809681958294632e1a7d4d60e01b845283019190602083019252565b03925af180156111ef575b6111dc575b506111aa611019565b8051920190335af16111ba611052565b50156111cf5750506001905b9038808061111f565b516312171d8360e31b8152fd5b806106266111e992610b97565b386111a1565b6111f7610c15565b61119c565b8880fd5b509050839250611224915061121d6110d06107ee60019688610cd8565b339061166e565b6111c6565b81611241929a503d8b116102bd576102ad8183610bdb565b9738611117565b611250610c15565b611110565b51906001600160701b03821682036103d357565b908160609103126103d35761127d81611255565b91604061128c60208401611255565b92015163ffffffff811681036103d35790565b6001600160a01b0381811690831614611343578160601b8160601b1060001461133d575b801561132b576055916040519160601b825260601b601482015260288120743ff02bb91e38d9638984317de928b85ddf3a793cab605a1b825260158201527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c630360358201522090565b60405163d92e233d60e01b8152600490fd5b906112c3565b604051630bd969eb60e41b8152600490fd5b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b038216811461134357606082901b736015551cd911ff4685072e2793f56c841e3ab66160611b101561133d57801561132b576055916040519160601b825260601b601482015260288120743ff02bb91e38d9638984317de928b85ddf3a793cab605a1b825260158201527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c630360358201522090565b811561140f570490565b634e487b7160e01b600052601260045260246000fd5b9190918015611492576103e88084108015611489575b611477576103e583818402930202926114548385611405565b0361146557610c1293020190611405565b604051631a93c68960e11b8152600490fd5b60405163bb55fd2760e01b8152600490fd5b5080831061143b565b604051631f2a200560e01b8152600490fd5b6107cd9080600019048211811515166114bb570290565b6114c3610cec565b0290565b80600019048211811515166114bb570290565b811981116114e6570190565b6114ee610cec565b0190565b6115309061152a90623cda206000198215158382048311166115d3575b85623cda2991048111861515166115c6575b850291026114da565b826114c7565b90600060038311156115a757506001828181811c600119811161159a575b0191905b84831061157a57505050610c129161156c611572926114a4565b90610d03565b6107ca900490565b909193506115918461158c8184611405565b6114da565b821c9190611552565b6115a2610cec565b61154e565b61157291610c12936115bd575b61156c906114a4565b600191506115b4565b6115ce610cec565b611521565b6115db610cec565b61150f565b9060006064926020958295604051946323b872dd60e01b86526004860152602485015260448401525af13d15601f3d11600160005114161716156103d357565b60446000916020936040519163a9059cbb60e01b8352600483015260248201528273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25af13d15601f3d11600160005114161716156103d357565b600091826044926020956040519363a9059cbb60e01b8552600485015260248401525af13d15601f3d11600160005114161716156103d35756fea164736f6c634300080f000a",
    "sourceMap": "438:8314:14:-:0;;;;;;;;;;;;;-1:-1:-1;438:8314:14;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;5402:4;5392:14;;5388:48;;-1:-1:-1;;;5450:50:14;;5474:10;5450:50;438:8314;5494:4;438:8314;;;;-1:-1:-1;;;;;438:8314:14;;;;;;;;5450:50;;;438:8314;5450:50;;;;;;;438:8314;5450:50;;;;438:8314;5450:60;;5446:96;;5567:68;;;;;:::i;:::-;438:8314;;;;;;;;;;;;;;;;5686:34;;;;;;;;;438:8314;5686:34;438:8314;;5686:34;;;438:8314;719:42:12;-1:-1:-1;;;;;719:42:12;;;;;5730:20:14;438:8314;;;5796:15;;;;5792:355;438:8314;;;5905:61;5842:33;;;;;:::i;:::-;5905:61;;;:::i;:::-;5792:355;;438:8314;;6161:26;;6157:65;;6256:16;;438:8314;6256:16;;;;;;;;;;;;;;;6724:37;6256:16;;;;;6688:13;6256:16;;6480:98;6256:16;;6622:22;6256:16;;6622:22;6256:16;6392:7;6256:16;;;6308;6457:12;6256:16;6282;;6256;;;:::i;:::-;6282;;;:::i;:::-;-1:-1:-1;;;;;438:8314:14;;;;;;6282:16;6308;;;:::i;:::-;5494:4;5474:10;;6392:7;;:::i;:::-;6448:6;438:8314;6457:12;;;:::i;:::-;438:8314;-1:-1:-1;;;6480:98:14;;438:8314;;;;;;;6562:15;;5494:4;;6480:98;;;:::i;:::-;;;;;;;;;5792:355;6480:98;;5792:355;6622:22;;;:::i;:::-;;;:::i;:::-;6688:13;:::i;:::-;438:8314;;-1:-1:-1;;;6724:37:14;;5474:10;6724:37;;;438:8314;;;;;;;;;;;;;;;;6724:37;;;;;;;;;;5792:355;6724:37;;;5792:355;-1:-1:-1;;438:8314:14;;;;;;;;;;;;;;;;6724:37;;;;;;;-1:-1:-1;6724:37:14;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;6480:98;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;6157:65;438:8314;;-1:-1:-1;;;6196:26:14;;438:8314;;6196:26;5792:355;6012:33;6075:61;6012:33;;;;;:::i;6075:61::-;5792:355;;;5686:34;;;;;;;438:8314;5686:34;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;5446:96;438:8314;;-1:-1:-1;;;5519:23:14;;438:8314;;5519:23;5450:50;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;-1:-1:-1;5450:50:14;;;;;:::i;:::-;;;5388:48;-1:-1:-1;;;5415:21:14;;;;;438:8314;;;;;-1:-1:-1;;;;;438:8314:14;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7294:4;7282:9;:16;7278:50;;7353:67;;;:::i;:::-;438:8314;;-1:-1:-1;;;7471:34:14;;438:8314;;-1:-1:-1;;;;;438:8314:14;;;;;;;;7471:34;438:8314;;;;7471:34;;;;;;;438:8314;-1:-1:-1;;;7471:34:14;;;438:8314;-1:-1:-1;438:8314:14;;;;-1:-1:-1;;;;;719:42:12;;;;768::14;;719::12;7581:14:14;;;438:8314;;;7691:61;7282:9;7626:35;7282:9;;7626:35;:::i;:::-;7691:61;;;:::i;:::-;7577:358;;438:8314;;7949:26;;7945:65;;8095:16;8044;;:::i;:::-;8070:15;;;;;:::i;:::-;768:42;438:8314;;;8070:15;8095:16;;;:::i;:::-;8122:42;;;;;438:8314;;8384:24;;8488:37;438:8314;8243:98;-1:-1:-1;438:8314:14;;;;;;;;;;;;8452:13;438:8314;;;;;;;;;;;;8122:42;;7282:9;8122:42;;;;;;;7577:358;8122:42;;7577:358;8211:6;;438:8314;8220:12;;;;;:::i;:::-;438:8314;-1:-1:-1;;;8243:98:14;;438:8314;;;;;;;8325:15;;8318:4;;;;8243:98;;;:::i;:::-;;;;;;;;;7577:358;8243:98;;7577:358;7282:9;;8384:24;:::i;:::-;;;:::i;8452:13::-;438:8314;;-1:-1:-1;;;8488:37:14;;8514:10;8488:37;;;438:8314;;;;;;;;;;;;;;;;8488:37;;;;;;;;;;7577:358;-1:-1:-1;8488:37:14;;;7577:358;-1:-1:-1;438:8314:14;;;;;;;;;;;;8488:37;;;;;438:8314;8488:37;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;8243:98;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;8122:42;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;:::i;:::-;;;7945:65;438:8314;;-1:-1:-1;;;7984:26:14;;438:8314;;7984:26;7577:358;7282:9;7863:61;7282:9;7798:35;7282:9;;7798:35;:::i;7863:61::-;7577:358;;;7471:34;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;7278:50;438:8314;-1:-1:-1;;;7307:21:14;;;438:8314;;;;;;;-1:-1:-1;;438:8314:14;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;3436:13:14;;438:8314;;-1:-1:-1;;;;;438:8314:14;;;;;;;;;;;;;;;3436:13;438:8314;;3436:13;;;;;;;438:8314;-1:-1:-1;3436:13:14;;;438:8314;-1:-1:-1;438:8314:14;;-1:-1:-1;;;3476:13:14;;438:8314;3476:13;438:8314;3476:13;438:8314;3476:13;;;;;;;;438:8314;-1:-1:-1;3476:13:14;;;438:8314;;;;;;;;;;;;3503:22;;:48;;;438:8314;3499:74;;438:8314;;-1:-1:-1;;;3587:55:14;;3616:10;3587:55;;;438:8314;;;3636:4;438:8314;;;;;;;;;;;;;;3587:55;;;;;;;;;;438:8314;-1:-1:-1;3587:55:14;;;438:8314;3587:72;;3583:108;;3636:4;3819:13;438:8314;3636:4;;;3764:14;4680:19;3636:4;;;;3993:22;3636:4;;;;3616:10;;3764:14;;:::i;:::-;3636:4;3819:13;;:::i;:::-;438:8314;;;3864:22;;;;:40;;;3938:16;;:::i;:::-;3964:19;;;;;;;;:::i;:::-;3993:22;;;:::i;:::-;4048:7;;;;:::i;:::-;438:8314;-1:-1:-1;;;;;438:8314:14;;;4048:7;438:8314;;-1:-1:-1;;;4074:41:14;;;3636:4;4074:41;;;438:8314;;;4065:6;438:8314;;;;;;;;;;;4074:41;;438:8314;;;4065:6;3636:4;;438:8314;;;;;;4074:41;;;;;;;;;;3864:40;-1:-1:-1;4074:41:14;;;3864:40;4074:41;;:::i;:::-;438:8314;;4303:44;;;3636:4;4303:44;;;438:8314;;;-1:-1:-1;;438:8314:14;;;3636:4;;438:8314;;;;;;4303:44;;;;;;;;;;3864:40;4303:44;;;;3864:40;4282:65;;;4278:168;;3864:40;438:8314;4501:41;;;-1:-1:-1;;3636:4:14;4501:41;;;438:8314;;;;;;;;;4501:41;438:8314;;;;;;4501:41;;;;;;;;;3864:40;-1:-1:-1;4501:41:14;;;3864:40;438:8314;;-1:-1:-1;438:8314:14;;;4456:201;438:8314;;;;;;;;;;;;4456:201;;4632:15;3636:4;;4456:201;;;;:::i;:::-;;;;;;;;;3864:40;4456:201;;3864:40;4680:19;;:::i;:::-;438:8314;;;;;;;;;;;;;4456:201;;;;;-1:-1:-1;4456:201:14;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;4501:41;-1:-1:-1;4501:41:14;;;;;;;;;-1:-1:-1;4501:41:14;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;4278:168;438:8314;4402:44;;;3636:4;4402:44;;;438:8314;;;;;;;4381:65;;438:8314;;;;;;;;;;;;;;;;4402:44;;;;;;;;;4278:168;4402:44;;;4278:168;4381:65;;:::i;:::-;4278:168;;;;;;4402:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;4303;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;4074:41;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;3864:40;;;;;;3583:108;438:8314;;-1:-1:-1;;;3668:23:14;;438:8314;;3668:23;3587:55;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;3499:74;438:8314;;-1:-1:-1;;;3560:13:14;;;3503:48;438:8314;;;;;3529:22;;3503:48;;3476:13;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;3436;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;438:8314;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;438:8314:14;;;;;;817:38;-1:-1:-1;;;;;438:8314:14;;;;;;946:72;768:42;990:10;:20;768:42;;946:72::o;768:42::-;;;;;;;;;;;;438:8314;;768:42;;;438:8314;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;5450:50;;438:8314;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;6270:1;438:8314;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;768:42;;;438:8314;;;;;;;;;;;6313:1;438:8314;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;768:42;;;438:8314;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;438:8314:14;;;;;;;;;;;;;;;1182:300;438:8314;;-1:-1:-1;;;1330:46:14;;1361:4;1330:46;;;438:8314;-1:-1:-1;;;;;438:8314:14;;;;;;;;1182:300;768:42;;1182:300;;1330:46;438:8314;;;768:42;1330:46;;;;;;;1182:300;-1:-1:-1;1330:46:14;;;1182:300;1390:18;;1386:90;;1182:300;;;:::o;1386:90::-;1330:46;4222:1269:15;-1:-1:-1;4222:1269:15;;;;438:8314:14;4222:1269:15;;;;;;;1330:46:14;4222:1269:15;;;;;;;;;;;;;;;-1:-1:-1;4222:1269:15;;;;;438:8314:14;;;1182:300::o;1330:46::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;1182:300;438:8314;;-1:-1:-1;;;1330:46:14;;1361:4;1330:46;;;438:8314;-1:-1:-1;;;;;438:8314:14;;;;;;;;;1182:300;438:8314;;;;;1182:300;;1330:46;438:8314;;;;1330:46;;;;;;;-1:-1:-1;1330:46:14;;;1390:18;;1386:90;;1182:300;;;:::o;438:8314::-;;;;;;;;;;;;;;;;;:::o;1613:185::-;438:8314;;;-1:-1:-1;;;1715:36:14;;1745:4;1715:36;;;438:8314;-1:-1:-1;;438:8314:14;;1762:29;;-1:-1:-1;;;;;438:8314:14;;;-1:-1:-1;;1715:36:14;;438:8314;1715:36;438:8314;;;;1715:36;;;;;;;1613:185;1715:36;;;;1613:185;1715:36;;;:::i;:::-;438:8314;;-1:-1:-1;;;1762:29:14;;-1:-1:-1;;;;;438:8314:14;;;1715:36;1762:29;;438:8314;;;;;;;;;;;;;;1762:29;;;;;;;;;1613:185;1762:29;;1613:185;:::o;1762:29::-;;;438:8314;1762:29;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;1613:185;:::o;1762:29::-;;;;;;;;:::i;:::-;;;1715:36;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;438:8314;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;438:8314:14;;;;;:::i;:::-;;;;-1:-1:-1;438:8314:14;;;;:::o;:::-;;;:::i;:::-;;;;;;:::o;1949:705::-;;438:8314;2015:15;438:8314;;;2087:9;2082:566;2098:10;;;;;;1949:705;;;;:::o;2110:26::-;2168:9;;;;;2162:26;:16;2168:9;;;;;:::i;:::-;-1:-1:-1;;;;;438:8314:14;;;2162:26;438:8314;;;-1:-1:-1;;;2162:41:14;;2197:4;2162:41;;;;438:8314;;;;;;;2162:41;;438:8314;2162:41;;;;438:8314;;;;;;2162:41;;;;;;;2110:26;2162:41;;;;2110:26;2152:51;;19970:67:12;2217:421:14;;2110:26;;;;;20244:1:12;438:8314:14;2087:9;;;;;2217:421;768:42;;-1:-1:-1;;;;;2279:9:14;;;;;:::i;:::-;438:8314;2279:19;768:42;;2322:31;;;;;438:8314;;2322:31;438:8314;;;;;;;;;;;;;;;;;;;2322:31;;;;438:8314;;;;;;;;2322:31;;;;;;;;;2275:349;2322:31;;2275:349;2428:12;;;:::i;:::-;2394:47;;;;;:10;:47;;;;:::i;:::-;;438:8314;2463:45;;2275:349;;20244:1:12;2275:349:14;;2217:421;;;;;;2463:45;438:8314;-1:-1:-1;;;2492:16:14;;;2322:31;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;438:8314;;;2275:349;2561:9;;;;;;2597:7;2561:9;;2555:16;2561:9;;20244:1:12;2561:9:14;;;:::i;2555:16::-;2585:10;2597:7;;:::i;:::-;2275:349;;2162:41;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;719:42:12;;;-1:-1:-1;;;;;719:42:12;;;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;3221:264::-;-1:-1:-1;;;;;438:8314:14;;;;;;2381:16:12;2377:49;;2464:338;;;;;;;;;;;;;;2811:39;;4523:499;;;;;2464:338;4523:499;;;2464:338;4523:499;;;;;;;;1051:66;;;4523:499;;;;;;814:66;4523:499;;;;;3221:264;:::o;2811:39::-;438:8314:14;;-1:-1:-1;;;2837:13:12;;;;;2464:338;;;;2377:49;438:8314:14;;-1:-1:-1;;;2406:20:12;;;;;3221:264;768:42:14;-1:-1:-1;;;;;438:8314:14;;2381:16:12;;2377:49;;2464:338;;;;-1:-1:-1;;;2464:338:12;;;;;;2811:39;;4523:499;;;;;2464:338;4523:499;;;2464:338;4523:499;;;;;;;;1051:66;;;4523:499;;;;;;814:66;4523:499;;;;;3221:264;:::o;1287:4::-;;;;;;;:::o;:::-;768:42:14;;;1287:4:12;;;;;;;;6827:735;;;;19729:59;;6988:42;;1287:4;7044:29;;;:63;;;;6827:735;7040:99;;7271:3;1287:4;;;;;;;7369:27;;;;;:::i;:::-;7355:41;7351:64;;7522:23;1287:4;;438:8314:14;7522:23:12;;:::i;7351:64::-;438:8314:14;;-1:-1:-1;;;7405:10:12;;;;;7040:99;438:8314:14;;-1:-1:-1;;;7116:23:12;;;;;7044:63;7077:30;;;;7044:63;;6988:42;438:8314:14;;-1:-1:-1;;;7018:12:12;;;;;438:8314:14;8731:4;438:8314;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;8538:212::-;8663:52;;8676:38;;8685:7;-1:-1:-1;;438:8314:14;;;;;;;;;;;8538:212;8707:7;;438:8314;;;;;;;;;;8538:212;438:8314;;;;8676:38;:::i;:::-;8663:52;;:::i;:::-;8647:69;438:8314;176:1:0;172:5;;176:1;;;-1:-1:-1;230:1:0;193:5;230:1;438:8314:14;;;-1:-1:-1;;438:8314:14;;;;168:230:0;438:8314:14;;;257:5:0;;;;;;168:230;;;8646:97:14;168:230:0;8719:16:14;8647:88;168:230:0;8719:16:14;:::i;:::-;8647:88;;:::i;:::-;8739:4;1287::12;;;;250:90:0;282:5;;;;310:9;282:5;310;;;;:::i;:::-;:9;:::i;:::-;438:8314:14;;;;250:90:0;;438:8314:14;;;:::i;:::-;;;168:230:0;8647:88:14;360:6:0;8646:97:14;360:6:0;356:42;;168:230;8719:16:14;168:230:0;8719:16:14;:::i;356:42:0:-;386:1;;-1:-1:-1;356:42:0;;438:8314:14;;;:::i;:::-;;;;;;:::i;:::-;;;1047:1573:15;;-1:-1:-1;1208:1355:15;1047:1573;1208:1355;1047:1573;;;1208:1355;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1208:1355:15;;;;;438:8314:14;;;1047:1573:15:o;2626:1456::-;2761:1269;-1:-1:-1;2626:1456:15;2761:1269;2626:1456;2761:1269;;;;;;;;;;;;;;;;;438:8314:14;2761:1269:15;;;;;;;;-1:-1:-1;2761:1269:15;;;;;438:8314:14;;;2626:1456:15:o;:::-;-1:-1:-1;2626:1456:15;;2761:1269;2626:1456;2761:1269;2626:1456;2761:1269;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2761:1269:15;;;;;438:8314:14;;;2626:1456:15:o",
    "linkReferences": {},
    "immutableReferences": {
      "6745": [
        {
          "start": 487,
          "length": 32
        },
        {
          "start": 1304,
          "length": 32
        },
        {
          "start": 2065,
          "length": 32
        },
        {
          "start": 2846,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "router()": "f887ea40",
    "swapAndStakeLiquidity(address,address,uint256,uint256)": "64551df3",
    "swapETHAndStakeLiquidity(address,uint256)": "942f0c27",
    "withdrawLiquidityAndSwap(address,uint256,address,uint256)": "ef409f90"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IdenticalAddresses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IOpenMevRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"swapAndStakeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"swapETHAndStakeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"desiredToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"desiredTokenOutMin\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidityAndSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapAndStakeLiquidity(address,address,uint256,uint256)\":{\"params\":{\"amountA\":\"Amount of token A desired to add to pool, inclusive of swap half to tokenB\",\"amountBMin\":\"Minimum amount of token B on swap, can be 0\",\"tokenA\":\"Token in pool\",\"tokenB\":\"Token in pool\"},\"returns\":{\"liquidity\":\"amount of liquidity token received, sent to msg.sender\"}},\"swapETHAndStakeLiquidity(address,uint256)\":{\"params\":{\"amountBMin\":\"Minimum amount of token B on swap, can be 0\",\"tokenB\":\"Token in pool\"},\"returns\":{\"liquidity\":\"amount of liquidity token received, sent to msg.sender\"}},\"withdrawLiquidityAndSwap(address,uint256,address,uint256)\":{\"params\":{\"desiredToken\":\"Withdrawl token desired\",\"desiredTokenOutMin\":\"Minimum amount of total desiredToken, can be 0\",\"pairAddress\":\"Address of V2 pool\",\"withdrawAmount\":\"Amount of liquidity to withdraw\"},\"returns\":{\"amountOut\":\"Amount of desiredToken received\"}}},\"title\":\"OpenMevZapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapAndStakeLiquidity(address,address,uint256,uint256)\":{\"notice\":\"Adds liquidity to an ERC-20\\u21c4ERC-20 pool from a single token. msg.sender should have already given the router an allowance of at least amountA on tokenA\"},\"swapETHAndStakeLiquidity(address,uint256)\":{\"notice\":\"Adds liquidity to an ERC-20\\u21c4ERC-20 pool from eth. msg.value is treated as a amountETHDesired. Leftover ETH, if any, is returned to msg.sender\"},\"withdrawLiquidityAndSwap(address,uint256,address,uint256)\":{\"notice\":\"Removes liquidity from an ERC-20\\u21c4ERC-20 pool into a single token / ETH . msg.sender should have already given the zapper an allowance of at least liquidity on the pool.\"}},\"notice\":\"Optimal UniswapV2Pair Liquidity deposits and withdrawls with a single token / eth (or relevant native currency)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"OpenMevZapper.sol\":\"OpenMevZapper\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":build/=/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"],\"viaIR\":true},\"sources\":{\"Babylonian.sol\":{\"keccak256\":\"0xf62b3ac7753450a557d694c50652929736aa20150fff8dedc103fd6828977ff0\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://121631e5641d8c98ed308c34d076f8fb1ffdeafd1178cb9b1ca5851945cea02c\",\"dweb:/ipfs/QmbJ6cuGApY3Sk1BFMdXPqGw3pDWrcR3aTwnWdJtLzr5pR\"]},\"ERC20.sol\":{\"keccak256\":\"0x446f8ef0df6b2b354aebad57597d3cfb8f00d184a6b1a559e70ad2098fd0285a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://856d220962e1b24efc92b0c2ef31e87ab0b43838e90df5ca3042a08013115951\",\"dweb:/ipfs/QmWuLL8Vk7DDqNn17KZxLxrYsa8R5MdFtZyFw6pAcerDYg\"]},\"IOpenMevRouter.sol\":{\"keccak256\":\"0xa1bf6bb8a681a12a11c2b1e5801f38ed7c915ea6590a1b5845a15c844e79123c\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://9e4548fac80db3c2b882bc1da6840451a7fb969a91764a4dfca0e5d350a04d43\",\"dweb:/ipfs/QmXg3HFh9bTT8XMTbpQDnaQazsbAu6ciZi8WfHEtmSvw4e\"]},\"IUniswapV2Factory.sol\":{\"keccak256\":\"0x58cc44883e51050422ac5c6deaa9fe818141c85154b2710f989349cb364edcc6\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://fd201f9078066b02b8b21d8c21e30a0f25a6b7b18050a83d75d9a4ee9bdae1f0\",\"dweb:/ipfs/QmYvT4bJSbRQfVt6A2p1PTEbEgtX9AKRD1mwRMAiNDRDYH\"]},\"IUniswapV2Pair.sol\":{\"keccak256\":\"0xeb4a2734a0f1e057bc45bd5831614e84159ea3e0bdeb74afa569378024bb0b14\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://fbf37e92eebb821f5643c8d780123f9a490d5676fa058d8b70df9be6761c99ac\",\"dweb:/ipfs/QmPNNgP29EQQuJPscNYcG7aerCyqxy4ZuyLRPXLfhYoGNH\"]},\"IWETH9.sol\":{\"keccak256\":\"0x31c2ad22149edc87750d4097eb6c5ce58daadc672fd48979ca66acf269bd3313\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://4818bfab5b2feb2caecc0039d930a68384aa8592cedabfe9cfc4a86be7f04103\",\"dweb:/ipfs/QmeYqzU46rgyXBJokTqpFf18qmga55iSb5knnULNVV7Jq6\"]},\"OpenMevLibrary.sol\":{\"keccak256\":\"0x749491764afee344b22cfabea698eae250ec280c9602d09b65743486ee58e517\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://4f0c3d11481e074ae3b1f00cef7ad14878eadca406c19047a95a53a633fc93a0\",\"dweb:/ipfs/Qmb7tgVKwGBEKQrCZ3YgcgKZRbt2Qy4heUcRD4hBHJcMgc\"]},\"OpenMevZapper.sol\":{\"keccak256\":\"0x02bcbf7d670bfdaa50aa85bb6de18a6aff447c925b1b6b5ad32a4fe2e06217f5\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://17a1389991924c85cdfbbffa4b242fb9f9be137a7549e93935d4c84de3f1938c\",\"dweb:/ipfs/QmRknahpGrr7N2ejJbjY48M1wZp2jDAYdMXXkxtTzPPpSH\"]},\"SafeTransferLib.sol\":{\"keccak256\":\"0xbc990c11ceb0bf7b4cf3d1f944b453683f0852d0a62101b0e17de62f3e7e0636\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://80b2b747c84a0a7aca8d65035d5607c7eb8a2ce6014f9db638ba332449d0fd38\",\"dweb:/ipfs/QmUEky7184PbnEzemVYQC2vbPG55hLU8gPhzrmdeEQ1d8Q\"]},\"Uint512.sol\":{\"keccak256\":\"0xb2c8b8b27f407ba0edcaec23931aa3102a9a62104026b6b45d8e494c285cb3cf\",\"license\":\"GPLv3\",\"urls\":[\"bzz-raw://6d4ae175e170ad914e198baacb864483be641ad9c91e87a171d58d7d592c9fe4\",\"dweb:/ipfs/QmeR329Jc8HAVGVohA9hvGqEuuY7fM2fhxV9jbADYRfa23\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_router",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "IdenticalAddresses"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientAAmount"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientAllowance"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientBAmount"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientLiquidity"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientLiquidity"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientOutputAmount"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidPath"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Overflow"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ZeroAmount"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "router",
          "outputs": [
            {
              "internalType": "contract IOpenMevRouter",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swapAndStakeLiquidity",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "swapETHAndStakeLiquidity",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "pairAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "withdrawAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "desiredToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "desiredTokenOutMin",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawLiquidityAndSwap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "swapAndStakeLiquidity(address,address,uint256,uint256)": {
            "params": {
              "amountA": "Amount of token A desired to add to pool, inclusive of swap half to tokenB",
              "amountBMin": "Minimum amount of token B on swap, can be 0",
              "tokenA": "Token in pool",
              "tokenB": "Token in pool"
            },
            "returns": {
              "liquidity": "amount of liquidity token received, sent to msg.sender"
            }
          },
          "swapETHAndStakeLiquidity(address,uint256)": {
            "params": {
              "amountBMin": "Minimum amount of token B on swap, can be 0",
              "tokenB": "Token in pool"
            },
            "returns": {
              "liquidity": "amount of liquidity token received, sent to msg.sender"
            }
          },
          "withdrawLiquidityAndSwap(address,uint256,address,uint256)": {
            "params": {
              "desiredToken": "Withdrawl token desired",
              "desiredTokenOutMin": "Minimum amount of total desiredToken, can be 0",
              "pairAddress": "Address of V2 pool",
              "withdrawAmount": "Amount of liquidity to withdraw"
            },
            "returns": {
              "amountOut": "Amount of desiredToken received"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "swapAndStakeLiquidity(address,address,uint256,uint256)": {
            "notice": "Adds liquidity to an ERC-20⇄ERC-20 pool from a single token. msg.sender should have already given the router an allowance of at least amountA on tokenA"
          },
          "swapETHAndStakeLiquidity(address,uint256)": {
            "notice": "Adds liquidity to an ERC-20⇄ERC-20 pool from eth. msg.value is treated as a amountETHDesired. Leftover ETH, if any, is returned to msg.sender"
          },
          "withdrawLiquidityAndSwap(address,uint256,address,uint256)": {
            "notice": "Removes liquidity from an ERC-20⇄ERC-20 pool into a single token / ETH . msg.sender should have already given the zapper an allowance of at least liquidity on the pool."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@uniswap/=node_modules/@uniswap/",
        ":build/=/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat/=node_modules/hardhat/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "OpenMevZapper.sol": "OpenMevZapper"
      },
      "libraries": {}
    },
    "sources": {
      "Babylonian.sol": {
        "keccak256": "0xf62b3ac7753450a557d694c50652929736aa20150fff8dedc103fd6828977ff0",
        "urls": [
          "bzz-raw://121631e5641d8c98ed308c34d076f8fb1ffdeafd1178cb9b1ca5851945cea02c",
          "dweb:/ipfs/QmbJ6cuGApY3Sk1BFMdXPqGw3pDWrcR3aTwnWdJtLzr5pR"
        ],
        "license": "UNLICENSED"
      },
      "ERC20.sol": {
        "keccak256": "0x446f8ef0df6b2b354aebad57597d3cfb8f00d184a6b1a559e70ad2098fd0285a",
        "urls": [
          "bzz-raw://856d220962e1b24efc92b0c2ef31e87ab0b43838e90df5ca3042a08013115951",
          "dweb:/ipfs/QmWuLL8Vk7DDqNn17KZxLxrYsa8R5MdFtZyFw6pAcerDYg"
        ],
        "license": "MIT"
      },
      "IOpenMevRouter.sol": {
        "keccak256": "0xa1bf6bb8a681a12a11c2b1e5801f38ed7c915ea6590a1b5845a15c844e79123c",
        "urls": [
          "bzz-raw://9e4548fac80db3c2b882bc1da6840451a7fb969a91764a4dfca0e5d350a04d43",
          "dweb:/ipfs/QmXg3HFh9bTT8XMTbpQDnaQazsbAu6ciZi8WfHEtmSvw4e"
        ],
        "license": "UNLICENSED"
      },
      "IUniswapV2Factory.sol": {
        "keccak256": "0x58cc44883e51050422ac5c6deaa9fe818141c85154b2710f989349cb364edcc6",
        "urls": [
          "bzz-raw://fd201f9078066b02b8b21d8c21e30a0f25a6b7b18050a83d75d9a4ee9bdae1f0",
          "dweb:/ipfs/QmYvT4bJSbRQfVt6A2p1PTEbEgtX9AKRD1mwRMAiNDRDYH"
        ],
        "license": "UNLICENSED"
      },
      "IUniswapV2Pair.sol": {
        "keccak256": "0xeb4a2734a0f1e057bc45bd5831614e84159ea3e0bdeb74afa569378024bb0b14",
        "urls": [
          "bzz-raw://fbf37e92eebb821f5643c8d780123f9a490d5676fa058d8b70df9be6761c99ac",
          "dweb:/ipfs/QmPNNgP29EQQuJPscNYcG7aerCyqxy4ZuyLRPXLfhYoGNH"
        ],
        "license": "UNLICENSED"
      },
      "IWETH9.sol": {
        "keccak256": "0x31c2ad22149edc87750d4097eb6c5ce58daadc672fd48979ca66acf269bd3313",
        "urls": [
          "bzz-raw://4818bfab5b2feb2caecc0039d930a68384aa8592cedabfe9cfc4a86be7f04103",
          "dweb:/ipfs/QmeYqzU46rgyXBJokTqpFf18qmga55iSb5knnULNVV7Jq6"
        ],
        "license": "UNLICENSED"
      },
      "OpenMevLibrary.sol": {
        "keccak256": "0x749491764afee344b22cfabea698eae250ec280c9602d09b65743486ee58e517",
        "urls": [
          "bzz-raw://4f0c3d11481e074ae3b1f00cef7ad14878eadca406c19047a95a53a633fc93a0",
          "dweb:/ipfs/Qmb7tgVKwGBEKQrCZ3YgcgKZRbt2Qy4heUcRD4hBHJcMgc"
        ],
        "license": "UNLICENSED"
      },
      "OpenMevZapper.sol": {
        "keccak256": "0x02bcbf7d670bfdaa50aa85bb6de18a6aff447c925b1b6b5ad32a4fe2e06217f5",
        "urls": [
          "bzz-raw://17a1389991924c85cdfbbffa4b242fb9f9be137a7549e93935d4c84de3f1938c",
          "dweb:/ipfs/QmRknahpGrr7N2ejJbjY48M1wZp2jDAYdMXXkxtTzPPpSH"
        ],
        "license": "UNLICENSED"
      },
      "SafeTransferLib.sol": {
        "keccak256": "0xbc990c11ceb0bf7b4cf3d1f944b453683f0852d0a62101b0e17de62f3e7e0636",
        "urls": [
          "bzz-raw://80b2b747c84a0a7aca8d65035d5607c7eb8a2ce6014f9db638ba332449d0fd38",
          "dweb:/ipfs/QmUEky7184PbnEzemVYQC2vbPG55hLU8gPhzrmdeEQ1d8Q"
        ],
        "license": "AGPL-3.0-only"
      },
      "Uint512.sol": {
        "keccak256": "0xb2c8b8b27f407ba0edcaec23931aa3102a9a62104026b6b45d8e494c285cb3cf",
        "urls": [
          "bzz-raw://6d4ae175e170ad914e198baacb864483be641ad9c91e87a171d58d7d592c9fe4",
          "dweb:/ipfs/QmeR329Jc8HAVGVohA9hvGqEuuY7fM2fhxV9jbADYRfa23"
        ],
        "license": "GPLv3"
      }
    },
    "version": 1
  },
  "irOptimized": "/// @use-src 14:\"OpenMevZapper.sol\"\nobject \"OpenMevZapper_7533\" {\n    code {\n        {\n            /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n            let _1 := memoryguard(0xa0)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"OpenMevZapper_7533\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 32)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n            let value := mload(_1)\n            let _2 := and(value, sub(shl(160, 1), 1))\n            if iszero(eq(value, _2))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 14:901:933  \"router = IOpenMevRouter(_router)\"\n            mstore(128, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2)\n            let _3 := mload(64)\n            let _4 := datasize(\"OpenMevZapper_7533_deployed\")\n            codecopy(_3, dataoffset(\"OpenMevZapper_7533_deployed\"), _4)\n            setimmutable(_3, \"6745\", mload(/** @src 14:901:933  \"router = IOpenMevRouter(_router)\" */ 128))\n            /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n            return(_3, _4)\n        }\n    }\n    /// @use-src 0:\"Babylonian.sol\", 12:\"OpenMevLibrary.sol\", 14:\"OpenMevZapper.sol\", 15:\"SafeTransferLib.sol\"\n    object \"OpenMevZapper_7533_deployed\" {\n        code {\n            {\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _1 := 128\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x64551df3 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _1) { revert(_4, _4) }\n                        let value := calldataload(_3)\n                        validator_revert_address(value)\n                        let value_1 := calldataload(36)\n                        validator_revert_address(value_1)\n                        let value2 := calldataload(68)\n                        /// @src 14:5388:5436  \"if (amountA < 2000) revert InsufficientAAmount()\"\n                        if /** @src 14:5392:5406  \"amountA < 2000\" */ lt(value2, /** @src 14:5402:5406  \"2000\" */ 0x07d0)\n                        /// @src 14:5388:5436  \"if (amountA < 2000) revert InsufficientAAmount()\"\n                        {\n                            /// @src 14:5415:5436  \"InsufficientAAmount()\"\n                            mstore(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1, /** @src 14:5415:5436  \"InsufficientAAmount()\" */ shl(224, 0x8dc525d1))\n                            revert(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1, _3)\n                        }\n                        let _5 := sub(shl(160, 1), 1)\n                        let _6 := and(/** @src 14:5450:5463  \"ERC20(tokenA)\" */ value, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _5)\n                        /// @src 14:5450:5500  \"ERC20(tokenA).allowance(msg.sender, address(this))\"\n                        mstore(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1, shl(225, 0x6eb1769f))\n                        let _7 := 32\n                        /// @src 14:5450:5500  \"ERC20(tokenA).allowance(msg.sender, address(this))\"\n                        let _8 := staticcall(gas(), _6, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1, /** @src 14:5450:5500  \"ERC20(tokenA).allowance(msg.sender, address(this))\" */ add(abi_encode_address_address_9726(/** @src 14:5474:5484  \"msg.sender\" */ caller(), /** @src 14:5494:5498  \"this\" */ address()), /** @src 14:5450:5500  \"ERC20(tokenA).allowance(msg.sender, address(this))\" */ not(127)), /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1, _7)\n                        /// @src 14:5450:5500  \"ERC20(tokenA).allowance(msg.sender, address(this))\"\n                        if iszero(_8) { revert_forward() }\n                        let expr := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4\n                        /// @src 14:5450:5500  \"ERC20(tokenA).allowance(msg.sender, address(this))\"\n                        if _8\n                        {\n                            let _9 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _7\n                            /// @src 14:5450:5500  \"ERC20(tokenA).allowance(msg.sender, address(this))\"\n                            if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _7, /** @src 14:5450:5500  \"ERC20(tokenA).allowance(msg.sender, address(this))\" */ returndatasize()) { _9 := returndatasize() }\n                            finalize_allocation_9727(_9)\n                            expr := abi_decode_uint256_fromMemory_9728(add(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1, /** @src 14:5450:5500  \"ERC20(tokenA).allowance(msg.sender, address(this))\" */ _9))\n                        }\n                        /// @src 14:5446:5542  \"if (ERC20(tokenA).allowance(msg.sender, address(this)) < amountA) revert InsufficientAllowance()\"\n                        if /** @src 14:5450:5510  \"ERC20(tokenA).allowance(msg.sender, address(this)) < amountA\" */ lt(expr, value2)\n                        /// @src 14:5446:5542  \"if (ERC20(tokenA).allowance(msg.sender, address(this)) < amountA) revert InsufficientAllowance()\"\n                        {\n                            /// @src 14:5519:5542  \"InsufficientAllowance()\"\n                            let _10 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_2)\n                            /// @src 14:5519:5542  \"InsufficientAllowance()\"\n                            mstore(_10, shl(224, 0x13be252b))\n                            revert(_10, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _3)\n                        }\n                        /// @src 14:5567:5635  \"OpenMevLibrary.pairFor(OpenMevLibrary.SUSHI_FACTORY, tokenA, tokenB)\"\n                        let expr_1 := fun_pairFor(value, value_1)\n                        /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                        let _11 := and(/** @src 14:5686:5706  \"IUniswapV2Pair(pair)\" */ expr_1, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _5)\n                        /// @src 14:5686:5720  \"IUniswapV2Pair(pair).getReserves()\"\n                        let _12 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_2)\n                        /// @src 14:5686:5720  \"IUniswapV2Pair(pair).getReserves()\"\n                        mstore(_12, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(226, 0x0240bc6b))\n                        /// @src 14:5686:5720  \"IUniswapV2Pair(pair).getReserves()\"\n                        let _13 := staticcall(gas(), _11, _12, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _3, /** @src 14:5686:5720  \"IUniswapV2Pair(pair).getReserves()\" */ _12, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 96)\n                        /// @src 14:5686:5720  \"IUniswapV2Pair(pair).getReserves()\"\n                        if iszero(_13) { revert_forward() }\n                        let expr_component := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4\n                        let expr_component_1 := _4\n                        /// @src 14:5686:5720  \"IUniswapV2Pair(pair).getReserves()\"\n                        if _13\n                        {\n                            let _14 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 96\n                            /// @src 14:5686:5720  \"IUniswapV2Pair(pair).getReserves()\"\n                            if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _14, /** @src 14:5686:5720  \"IUniswapV2Pair(pair).getReserves()\" */ returndatasize()) { _14 := returndatasize() }\n                            finalize_allocation(_12, _14)\n                            let expr_component_2, expr_component_3, expr_component_4 := abi_decode_uint112t_uint112t_uint32_fromMemory(_12, add(_12, _14))\n                            expr_component := expr_component_2\n                            expr_component_1 := expr_component_3\n                        }\n                        /// @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\"\n                        let _15 := 0xffffffffffffffffffffffffffff\n                        /// @src 14:5645:5720  \"(uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves()\"\n                        let var_reserve0 := /** @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\" */ and(/** @src 14:5645:5720  \"(uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves()\" */ expr_component, /** @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\" */ _15)\n                        /// @src 14:5645:5720  \"(uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves()\"\n                        let var_reserve1 := /** @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\" */ and(/** @src 14:5645:5720  \"(uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves()\" */ expr_component_1, /** @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\" */ _15)\n                        /// @src 14:5730:5750  \"uint256 swapAmountIn\"\n                        let var_swapAmountIn := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4\n                        /// @src 14:5760:5781  \"uint256 swapAmountOut\"\n                        let var_swapAmountOut := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4\n                        let _16 := and(/** @src 14:5796:5811  \"tokenA < tokenB\" */ value_1, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _5)\n                        /// @src 14:5792:6147  \"if (tokenA < tokenB) {...\"\n                        switch /** @src 14:5796:5811  \"tokenA < tokenB\" */ lt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6, _16)\n                        case /** @src 14:5792:6147  \"if (tokenA < tokenB) {...\" */ 0 {\n                            /// @src 14:5997:6045  \"swapAmountIn = _getSwapAmount(amountA, reserve1)\"\n                            var_swapAmountIn := /** @src 14:6012:6045  \"_getSwapAmount(amountA, reserve1)\" */ fun_getSwapAmount(value2, var_reserve1)\n                            /// @src 14:6059:6136  \"swapAmountOut = OpenMevLibrary.getAmountOut(swapAmountIn, reserve1, reserve0)\"\n                            var_swapAmountOut := /** @src 14:6075:6136  \"OpenMevLibrary.getAmountOut(swapAmountIn, reserve1, reserve0)\" */ fun_getAmountOut(var_swapAmountIn, var_reserve1, var_reserve0)\n                        }\n                        default /// @src 14:5792:6147  \"if (tokenA < tokenB) {...\"\n                        {\n                            /// @src 14:5827:5875  \"swapAmountIn = _getSwapAmount(amountA, reserve0)\"\n                            var_swapAmountIn := /** @src 14:5842:5875  \"_getSwapAmount(amountA, reserve0)\" */ fun_getSwapAmount(value2, var_reserve0)\n                            /// @src 14:5889:5966  \"swapAmountOut = OpenMevLibrary.getAmountOut(swapAmountIn, reserve0, reserve1)\"\n                            var_swapAmountOut := /** @src 14:5905:5966  \"OpenMevLibrary.getAmountOut(swapAmountIn, reserve0, reserve1)\" */ fun_getAmountOut(var_swapAmountIn, var_reserve0, var_reserve1)\n                        }\n                        /// @src 14:6157:6222  \"if (swapAmountOut < amountBMin) revert InsufficientOutputAmount()\"\n                        if /** @src 14:6161:6187  \"swapAmountOut < amountBMin\" */ lt(var_swapAmountOut, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ calldataload(100))\n                        /// @src 14:6157:6222  \"if (swapAmountOut < amountBMin) revert InsufficientOutputAmount()\"\n                        {\n                            /// @src 14:6196:6222  \"InsufficientOutputAmount()\"\n                            let _17 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_2)\n                            /// @src 14:6196:6222  \"InsufficientOutputAmount()\"\n                            mstore(_17, shl(224, 0x42301c23))\n                            revert(_17, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _3)\n                        }\n                        /// @src 14:6256:6272  \"new address[](2)\"\n                        let expr_mpos := allocate_and_zero_memory_array_array_address_dyn()\n                        /// @src 14:6282:6298  \"path[0] = tokenA\"\n                        write_to_memory_address(memory_array_index_access_address_dyn_5411(expr_mpos), value)\n                        /// @src 14:6308:6324  \"path[1] = tokenB\"\n                        write_to_memory_address(memory_array_index_access_address_dyn_5412(expr_mpos), value_1)\n                        /// @src 14:6392:6399  \"amountA\"\n                        fun_safeTransferFrom(_6, /** @src 14:5474:5484  \"msg.sender\" */ caller(), /** @src 14:5494:5498  \"this\" */ address(), /** @src 14:6392:6399  \"amountA\" */ value2)\n                        /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                        let _18 := and(/** @src 14:6448:6454  \"router\" */ loadimmutable(\"6745\"), /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _5)\n                        /// @src 14:6457:6469  \"swapAmountIn\"\n                        fun_approveTokenIfNeeded(value, _18, var_swapAmountIn)\n                        /// @src 14:6480:6578  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\"\n                        let _19 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_2)\n                        /// @src 14:6480:6578  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\"\n                        mstore(_19, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(224, 0x38ed1739))\n                        /// @src 14:6480:6578  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\"\n                        let _20 := call(gas(), _18, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4, /** @src 14:6480:6578  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\" */ _19, sub(abi_encode_uint256_uint256_array_address_dyn_address_uint256(add(_19, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _3), /** @src 14:6480:6578  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\" */ var_swapAmountIn, var_swapAmountOut, expr_mpos, /** @src 14:5494:5498  \"this\" */ address(), /** @src 14:6562:6577  \"block.timestamp\" */ timestamp()), /** @src 14:6480:6578  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\" */ _19), _19, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4)\n                        /// @src 14:6480:6578  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\"\n                        if iszero(_20) { revert_forward() }\n                        if _20\n                        {\n                            let _21 := returndatasize()\n                            returndatacopy(_19, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4, /** @src 14:6480:6578  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\" */ _21)\n                            finalize_allocation(_19, _21)\n                            pop(abi_decode_array_uint256_dyn_fromMemory(_19, add(_19, _21)))\n                        }\n                        /// @src 14:6622:6644  \"amountA - swapAmountIn\"\n                        fun_safeTransfer(_6, expr_1, checked_sub_uint256(value2, var_swapAmountIn))\n                        /// @src 14:6688:6701  \"swapAmountOut\"\n                        fun_safeTransfer(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _16, /** @src 14:6688:6701  \"swapAmountOut\" */ expr_1, var_swapAmountOut)\n                        /// @src 14:6724:6761  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                        let _22 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_2)\n                        /// @src 14:6724:6761  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                        mstore(_22, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(225, 0x35313c21))\n                        /// @src 14:6724:6761  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                        let _23 := call(gas(), _11, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4, /** @src 14:6724:6761  \"IUniswapV2Pair(pair).mint(msg.sender)\" */ _22, sub(abi_encode_address(add(_22, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _3), /** @src 14:5474:5484  \"msg.sender\" */ caller()), /** @src 14:6724:6761  \"IUniswapV2Pair(pair).mint(msg.sender)\" */ _22), _22, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _7)\n                        /// @src 14:6724:6761  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                        if iszero(_23) { revert_forward() }\n                        let expr_2 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4\n                        /// @src 14:6724:6761  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                        if _23\n                        {\n                            let _24 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _7\n                            /// @src 14:6724:6761  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                            if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _7, /** @src 14:6724:6761  \"IUniswapV2Pair(pair).mint(msg.sender)\" */ returndatasize()) { _24 := returndatasize() }\n                            finalize_allocation(_22, _24)\n                            expr_2 := abi_decode_uint256_fromMemory(_22, add(_22, _24))\n                        }\n                        /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                        let memPos := mload(_2)\n                        return(memPos, sub(abi_encode_uint256(memPos, expr_2), memPos))\n                    }\n                    case 0x942f0c27 {\n                        external_fun_swapETHAndStakeLiquidity()\n                    }\n                    case 0xef409f90 {\n                        external_fun_withdrawLiquidityAndSwap()\n                    }\n                    case 0xf887ea40 { external_fun_router() }\n                }\n                if iszero(calldatasize())\n                {\n                    fun()\n                    stop()\n                }\n                revert(0, 0)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, value0)\n            }\n            function external_fun_swapETHAndStakeLiquidity()\n            {\n                let _1 := 64\n                if slt(add(calldatasize(), not(3)), _1)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _2 := 4\n                let value := calldataload(_2)\n                validator_revert_address(value)\n                /// @src 14:7278:7328  \"if (msg.value < 2000) revert InsufficientAAmount()\"\n                if /** @src 14:7282:7298  \"msg.value < 2000\" */ lt(/** @src 14:7282:7291  \"msg.value\" */ callvalue(), /** @src 14:7294:7298  \"2000\" */ 0x07d0)\n                /// @src 14:7278:7328  \"if (msg.value < 2000) revert InsufficientAAmount()\"\n                {\n                    /// @src 14:7307:7328  \"InsufficientAAmount()\"\n                    let _3 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_1)\n                    /// @src 14:7307:7328  \"InsufficientAAmount()\"\n                    mstore(_3, /** @src 14:5415:5436  \"InsufficientAAmount()\" */ shl(224, 0x8dc525d1))\n                    /// @src 14:7307:7328  \"InsufficientAAmount()\"\n                    revert(_3, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2)\n                }\n                /// @src 14:7353:7420  \"OpenMevLibrary.pairFor(OpenMevLibrary.SUSHI_FACTORY, WETH9, tokenB)\"\n                let expr := fun_pairFor_5420(value)\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _4 := sub(shl(160, 1), 1)\n                let _5 := and(/** @src 14:7471:7491  \"IUniswapV2Pair(pair)\" */ expr, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4)\n                /// @src 14:7471:7505  \"IUniswapV2Pair(pair).getReserves()\"\n                let _6 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_1)\n                /// @src 14:7471:7505  \"IUniswapV2Pair(pair).getReserves()\"\n                mstore(_6, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(226, 0x0240bc6b))\n                /// @src 14:7471:7505  \"IUniswapV2Pair(pair).getReserves()\"\n                let _7 := staticcall(gas(), _5, _6, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2, /** @src 14:7471:7505  \"IUniswapV2Pair(pair).getReserves()\" */ _6, 96)\n                if iszero(_7) { revert_forward() }\n                let expr_component := /** @src -1:-1:-1 */ 0\n                let expr_component_1 := expr_component\n                /// @src 14:7471:7505  \"IUniswapV2Pair(pair).getReserves()\"\n                if _7\n                {\n                    let _8 := 96\n                    if gt(_8, returndatasize()) { _8 := returndatasize() }\n                    finalize_allocation(_6, _8)\n                    let expr_component_2, expr_component_3, expr_component_4 := abi_decode_uint112t_uint112t_uint32_fromMemory(_6, add(_6, _8))\n                    expr_component := expr_component_2\n                    expr_component_1 := expr_component_3\n                }\n                /// @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\"\n                let _9 := 0xffffffffffffffffffffffffffff\n                /// @src 14:7430:7505  \"(uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves()\"\n                let var_reserve0 := /** @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\" */ and(/** @src 14:7430:7505  \"(uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves()\" */ expr_component, /** @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\" */ _9)\n                /// @src 14:7430:7505  \"(uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves()\"\n                let var_reserve1 := /** @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\" */ and(/** @src 14:7430:7505  \"(uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves()\" */ expr_component_1, /** @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\" */ _9)\n                /// @src 14:7515:7535  \"uint256 swapAmountIn\"\n                let var_swapAmountIn := /** @src -1:-1:-1 */ 0\n                /// @src 14:7545:7566  \"uint256 swapAmountOut\"\n                let var_swapAmountOut := /** @src -1:-1:-1 */ var_swapAmountIn\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _10 := and(/** @src 14:7581:7595  \"WETH9 < tokenB\" */ value, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4)\n                /// @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n                let _11 := 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\n                /// @src 14:7577:7935  \"if (WETH9 < tokenB) {...\"\n                switch /** @src 14:7581:7595  \"WETH9 < tokenB\" */ lt(/** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ _11, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _10)\n                case /** @src 14:7577:7935  \"if (WETH9 < tokenB) {...\" */ 0 {\n                    /// @src 14:7783:7833  \"swapAmountIn = _getSwapAmount(msg.value, reserve1)\"\n                    var_swapAmountIn := /** @src 14:7798:7833  \"_getSwapAmount(msg.value, reserve1)\" */ fun_getSwapAmount(/** @src 14:7282:7291  \"msg.value\" */ callvalue(), /** @src 14:7798:7833  \"_getSwapAmount(msg.value, reserve1)\" */ var_reserve1)\n                    /// @src 14:7847:7924  \"swapAmountOut = OpenMevLibrary.getAmountOut(swapAmountIn, reserve1, reserve0)\"\n                    var_swapAmountOut := /** @src 14:7863:7924  \"OpenMevLibrary.getAmountOut(swapAmountIn, reserve1, reserve0)\" */ fun_getAmountOut(var_swapAmountIn, var_reserve1, var_reserve0)\n                }\n                default /// @src 14:7577:7935  \"if (WETH9 < tokenB) {...\"\n                {\n                    /// @src 14:7611:7661  \"swapAmountIn = _getSwapAmount(msg.value, reserve0)\"\n                    var_swapAmountIn := /** @src 14:7626:7661  \"_getSwapAmount(msg.value, reserve0)\" */ fun_getSwapAmount(/** @src 14:7282:7291  \"msg.value\" */ callvalue(), /** @src 14:7626:7661  \"_getSwapAmount(msg.value, reserve0)\" */ var_reserve0)\n                    /// @src 14:7675:7752  \"swapAmountOut = OpenMevLibrary.getAmountOut(swapAmountIn, reserve0, reserve1)\"\n                    var_swapAmountOut := /** @src 14:7691:7752  \"OpenMevLibrary.getAmountOut(swapAmountIn, reserve0, reserve1)\" */ fun_getAmountOut(var_swapAmountIn, var_reserve0, var_reserve1)\n                }\n                /// @src 14:7945:8010  \"if (swapAmountOut < amountBMin) revert InsufficientOutputAmount()\"\n                if /** @src 14:7949:7975  \"swapAmountOut < amountBMin\" */ lt(var_swapAmountOut, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ calldataload(36))\n                /// @src 14:7945:8010  \"if (swapAmountOut < amountBMin) revert InsufficientOutputAmount()\"\n                {\n                    /// @src 14:7984:8010  \"InsufficientOutputAmount()\"\n                    let _12 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_1)\n                    /// @src 14:7984:8010  \"InsufficientOutputAmount()\"\n                    mstore(_12, /** @src 14:6196:6222  \"InsufficientOutputAmount()\" */ shl(224, 0x42301c23))\n                    /// @src 14:7984:8010  \"InsufficientOutputAmount()\"\n                    revert(_12, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2)\n                }\n                /// @src 14:8044:8060  \"new address[](2)\"\n                let expr_mpos := allocate_and_zero_memory_array_array_address_dyn()\n                /// @src 14:8070:8085  \"path[0] = WETH9\"\n                write_to_memory_address_5423(memory_array_index_access_address_dyn_5411(expr_mpos))\n                /// @src 14:8095:8111  \"path[1] = tokenB\"\n                write_to_memory_address(memory_array_index_access_address_dyn_5412(expr_mpos), value)\n                /// @src 14:8122:8164  \"IWETH(WETH9).deposit{ value: msg.value }()\"\n                if iszero(extcodesize(/** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ _11))\n                /// @src 14:8122:8164  \"IWETH(WETH9).deposit{ value: msg.value }()\"\n                {\n                    /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 14:8122:8164  \"IWETH(WETH9).deposit{ value: msg.value }()\"\n                let _13 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_1)\n                /// @src 14:8122:8164  \"IWETH(WETH9).deposit{ value: msg.value }()\"\n                mstore(_13, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(228, 0x0d0e30db))\n                /// @src 14:8122:8164  \"IWETH(WETH9).deposit{ value: msg.value }()\"\n                let _14 := call(gas(), /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ _11, /** @src 14:7282:7291  \"msg.value\" */ callvalue(), /** @src 14:8122:8164  \"IWETH(WETH9).deposit{ value: msg.value }()\" */ _13, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2, /** @src 14:8122:8164  \"IWETH(WETH9).deposit{ value: msg.value }()\" */ _13, /** @src -1:-1:-1 */ 0)\n                /// @src 14:8122:8164  \"IWETH(WETH9).deposit{ value: msg.value }()\"\n                if iszero(_14) { revert_forward() }\n                if _14\n                {\n                    finalize_allocation_5425(_13)\n                    abi_decode(_13, _13)\n                }\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _15 := and(/** @src 14:8211:8217  \"router\" */ loadimmutable(\"6745\"), /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4)\n                /// @src 14:8220:8232  \"swapAmountIn\"\n                fun_approveTokenIfNeeded_5426(_15, var_swapAmountIn)\n                /// @src 14:8243:8341  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\"\n                let _16 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_1)\n                /// @src 14:8243:8341  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\"\n                mstore(_16, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(224, 0x38ed1739))\n                /// @src 14:8243:8341  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\"\n                let _17 := call(gas(), _15, /** @src -1:-1:-1 */ 0, /** @src 14:8243:8341  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\" */ _16, sub(abi_encode_uint256_uint256_array_address_dyn_address_uint256(add(_16, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2), /** @src 14:8243:8341  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\" */ var_swapAmountIn, var_swapAmountOut, expr_mpos, /** @src 14:8318:8322  \"this\" */ address(), /** @src 14:8325:8340  \"block.timestamp\" */ timestamp()), /** @src 14:8243:8341  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\" */ _16), _16, /** @src -1:-1:-1 */ 0)\n                /// @src 14:8243:8341  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\"\n                if iszero(_17) { revert_forward() }\n                if _17\n                {\n                    let _18 := returndatasize()\n                    returndatacopy(_16, /** @src -1:-1:-1 */ 0, /** @src 14:8243:8341  \"router.swapExactTokensForTokens(swapAmountIn, swapAmountOut, path, address(this), block.timestamp)\" */ _18)\n                    finalize_allocation(_16, _18)\n                    pop(abi_decode_array_uint256_dyn_fromMemory(_16, add(_16, _18)))\n                }\n                /// @src 14:8384:8408  \"msg.value - swapAmountIn\"\n                fun_safeTransfer_5427(expr, checked_sub_uint256(/** @src 14:7282:7291  \"msg.value\" */ callvalue(), /** @src 14:8384:8408  \"msg.value - swapAmountIn\" */ var_swapAmountIn))\n                /// @src 14:8452:8465  \"swapAmountOut\"\n                fun_safeTransfer(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _10, /** @src 14:8452:8465  \"swapAmountOut\" */ expr, var_swapAmountOut)\n                /// @src 14:8488:8525  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                let _19 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_1)\n                /// @src 14:8488:8525  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                mstore(_19, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(225, 0x35313c21))\n                /// @src 14:8488:8525  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                let _20 := call(gas(), _5, /** @src -1:-1:-1 */ 0, /** @src 14:8488:8525  \"IUniswapV2Pair(pair).mint(msg.sender)\" */ _19, sub(abi_encode_address(add(_19, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2), /** @src 14:8514:8524  \"msg.sender\" */ caller()), /** @src 14:8488:8525  \"IUniswapV2Pair(pair).mint(msg.sender)\" */ _19), _19, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 32)\n                /// @src 14:8488:8525  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                if iszero(_20) { revert_forward() }\n                let expr_1 := /** @src -1:-1:-1 */ 0\n                /// @src 14:8488:8525  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                if _20\n                {\n                    let _21 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 32\n                    /// @src 14:8488:8525  \"IUniswapV2Pair(pair).mint(msg.sender)\"\n                    if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _21, /** @src 14:8488:8525  \"IUniswapV2Pair(pair).mint(msg.sender)\" */ returndatasize()) { _21 := returndatasize() }\n                    finalize_allocation(_19, _21)\n                    expr_1 := abi_decode_uint256_fromMemory(_19, add(_19, _21))\n                }\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let memPos := mload(_1)\n                return(memPos, sub(abi_encode_uint256(memPos, expr_1), memPos))\n            }\n            function external_fun_withdrawLiquidityAndSwap()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 128)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _1 := 4\n                let value := calldataload(_1)\n                validator_revert_address(value)\n                let value1 := calldataload(36)\n                let value_1 := calldataload(68)\n                validator_revert_address(value_1)\n                let value3 := calldataload(100)\n                let _2 := sub(shl(160, 1), 1)\n                let _3 := and(/** @src 14:3382:3409  \"IUniswapV2Pair(pairAddress)\" */ value, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2)\n                let _4 := 64\n                /// @src 14:3436:3449  \"pair.token0()\"\n                let _5 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_4)\n                /// @src 14:3436:3449  \"pair.token0()\"\n                mstore(_5, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(224, 0x0dfe1681))\n                let _6 := 32\n                /// @src 14:3436:3449  \"pair.token0()\"\n                let _7 := staticcall(gas(), _3, _5, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1, /** @src 14:3436:3449  \"pair.token0()\" */ _5, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6)\n                /// @src 14:3436:3449  \"pair.token0()\"\n                if iszero(_7) { revert_forward() }\n                let expr := /** @src -1:-1:-1 */ 0\n                /// @src 14:3436:3449  \"pair.token0()\"\n                if _7\n                {\n                    let _8 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6\n                    /// @src 14:3436:3449  \"pair.token0()\"\n                    if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6, /** @src 14:3436:3449  \"pair.token0()\" */ returndatasize()) { _8 := returndatasize() }\n                    finalize_allocation(_5, _8)\n                    expr := abi_decode_address_fromMemory(_5, add(_5, _8))\n                }\n                /// @src 14:3476:3489  \"pair.token1()\"\n                let _9 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_4)\n                /// @src 14:3476:3489  \"pair.token1()\"\n                mstore(_9, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(224, 0xd21220a7))\n                /// @src 14:3476:3489  \"pair.token1()\"\n                let _10 := staticcall(gas(), _3, _9, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1, /** @src 14:3476:3489  \"pair.token1()\" */ _9, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6)\n                /// @src 14:3476:3489  \"pair.token1()\"\n                if iszero(_10) { revert_forward() }\n                let expr_1 := /** @src -1:-1:-1 */ 0\n                /// @src 14:3476:3489  \"pair.token1()\"\n                if _10\n                {\n                    let _11 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6\n                    /// @src 14:3476:3489  \"pair.token1()\"\n                    if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6, /** @src 14:3476:3489  \"pair.token1()\" */ returndatasize()) { _11 := returndatasize() }\n                    finalize_allocation(_9, _11)\n                    expr_1 := abi_decode_address_fromMemory(_9, add(_9, _11))\n                }\n                /// @src 14:3503:3525  \"token0 != desiredToken\"\n                let _12 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ and(/** @src 14:3503:3525  \"token0 != desiredToken\" */ value_1, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2)\n                /// @src 14:3503:3551  \"token0 != desiredToken && token1 != desiredToken\"\n                let expr_2 := /** @src 14:3503:3525  \"token0 != desiredToken\" */ iszero(eq(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ and(/** @src 14:3503:3525  \"token0 != desiredToken\" */ expr, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2), /** @src 14:3503:3525  \"token0 != desiredToken\" */ _12))\n                /// @src 14:3503:3551  \"token0 != desiredToken && token1 != desiredToken\"\n                if expr_2\n                {\n                    expr_2 := /** @src 14:3529:3551  \"token1 != desiredToken\" */ iszero(eq(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ and(/** @src 14:3529:3551  \"token1 != desiredToken\" */ expr_1, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2), /** @src 14:3529:3551  \"token1 != desiredToken\" */ _12))\n                }\n                /// @src 14:3499:3573  \"if (token0 != desiredToken && token1 != desiredToken) revert InvalidPath()\"\n                if expr_2\n                {\n                    /// @src 14:3560:3573  \"InvalidPath()\"\n                    let _13 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_4)\n                    /// @src 14:3560:3573  \"InvalidPath()\"\n                    mstore(_13, shl(224, 0x20db8267))\n                    revert(_13, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1)\n                }\n                /// @src 14:3587:3642  \"ERC20(pairAddress).allowance(msg.sender, address(this))\"\n                let _14 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_4)\n                /// @src 14:3587:3642  \"ERC20(pairAddress).allowance(msg.sender, address(this))\"\n                mstore(_14, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(225, 0x6eb1769f))\n                /// @src 14:3587:3642  \"ERC20(pairAddress).allowance(msg.sender, address(this))\"\n                let _15 := staticcall(gas(), _3, _14, sub(abi_encode_address_address(add(_14, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1), /** @src 14:3616:3626  \"msg.sender\" */ caller(), /** @src 14:3636:3640  \"this\" */ address()), /** @src 14:3587:3642  \"ERC20(pairAddress).allowance(msg.sender, address(this))\" */ _14), _14, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6)\n                /// @src 14:3587:3642  \"ERC20(pairAddress).allowance(msg.sender, address(this))\"\n                if iszero(_15) { revert_forward() }\n                let expr_3 := /** @src -1:-1:-1 */ 0\n                /// @src 14:3587:3642  \"ERC20(pairAddress).allowance(msg.sender, address(this))\"\n                if _15\n                {\n                    let _16 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6\n                    /// @src 14:3587:3642  \"ERC20(pairAddress).allowance(msg.sender, address(this))\"\n                    if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6, /** @src 14:3587:3642  \"ERC20(pairAddress).allowance(msg.sender, address(this))\" */ returndatasize()) { _16 := returndatasize() }\n                    finalize_allocation(_14, _16)\n                    expr_3 := abi_decode_uint256_fromMemory(_14, add(_14, _16))\n                }\n                /// @src 14:3583:3691  \"if (ERC20(pairAddress).allowance(msg.sender, address(this)) < withdrawAmount) revert InsufficientAllowance()\"\n                if /** @src 14:3587:3659  \"ERC20(pairAddress).allowance(msg.sender, address(this)) < withdrawAmount\" */ lt(expr_3, value1)\n                /// @src 14:3583:3691  \"if (ERC20(pairAddress).allowance(msg.sender, address(this)) < withdrawAmount) revert InsufficientAllowance()\"\n                {\n                    /// @src 14:3668:3691  \"InsufficientAllowance()\"\n                    let _17 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_4)\n                    /// @src 14:3668:3691  \"InsufficientAllowance()\"\n                    mstore(_17, /** @src 14:5519:5542  \"InsufficientAllowance()\" */ shl(224, 0x13be252b))\n                    /// @src 14:3668:3691  \"InsufficientAllowance()\"\n                    revert(_17, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1)\n                }\n                /// @src 14:3764:3778  \"withdrawAmount\"\n                fun_safeTransferFrom(_3, /** @src 14:3616:3626  \"msg.sender\" */ caller(), /** @src 14:3636:3640  \"this\" */ address(), /** @src 14:3764:3778  \"withdrawAmount\" */ value1)\n                /// @src 14:3819:3832  \"address(this)\"\n                fun_removeLiquidity(value, /** @src 14:3636:3640  \"this\" */ address())\n                /// @src 14:3864:3904  \"token1 == desiredToken ? token0 : token1\"\n                let expr_4 := /** @src -1:-1:-1 */ 0\n                /// @src 14:3864:3904  \"token1 == desiredToken ? token0 : token1\"\n                switch /** @src 14:3864:3886  \"token1 == desiredToken\" */ eq(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ and(/** @src 14:3864:3886  \"token1 == desiredToken\" */ expr_1, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2), /** @src 14:3864:3886  \"token1 == desiredToken\" */ _12)\n                case /** @src 14:3864:3904  \"token1 == desiredToken ? token0 : token1\" */ 0 { expr_4 := expr_1 }\n                default { expr_4 := expr }\n                /// @src 14:3938:3954  \"new address[](2)\"\n                let expr_mpos := allocate_and_zero_memory_array_array_address_dyn()\n                /// @src 14:3964:3983  \"path[0] = swapToken\"\n                write_to_memory_address(memory_array_index_access_address_dyn_5411(expr_mpos), expr_4)\n                /// @src 14:3993:4015  \"path[1] = desiredToken\"\n                write_to_memory_address(memory_array_index_access_address_dyn_5412(expr_mpos), value_1)\n                /// @src 14:4048:4055  \"path[0]\"\n                let _18 := read_from_memoryt_address(memory_array_index_access_address_dyn_5411(expr_mpos))\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _19 := and(/** @src 14:4065:4071  \"router\" */ loadimmutable(\"6745\"), /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2)\n                let _20 := and(/** @src 14:4074:4090  \"ERC20(swapToken)\" */ expr_4, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _2)\n                /// @src 14:4074:4115  \"ERC20(swapToken).balanceOf(address(this))\"\n                let _21 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_4)\n                let _22 := shl(224, 0x70a08231)\n                /// @src 14:4074:4115  \"ERC20(swapToken).balanceOf(address(this))\"\n                mstore(_21, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _22)\n                /// @src 14:4074:4115  \"ERC20(swapToken).balanceOf(address(this))\"\n                let _23 := staticcall(gas(), _20, _21, sub(abi_encode_address(add(_21, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1), /** @src 14:3636:3640  \"this\" */ address()), /** @src 14:4074:4115  \"ERC20(swapToken).balanceOf(address(this))\" */ _21), _21, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6)\n                /// @src 14:4074:4115  \"ERC20(swapToken).balanceOf(address(this))\"\n                if iszero(_23) { revert_forward() }\n                let expr_5 := /** @src -1:-1:-1 */ 0\n                /// @src 14:4074:4115  \"ERC20(swapToken).balanceOf(address(this))\"\n                if _23\n                {\n                    let _24 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6\n                    /// @src 14:4074:4115  \"ERC20(swapToken).balanceOf(address(this))\"\n                    if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6, /** @src 14:4074:4115  \"ERC20(swapToken).balanceOf(address(this))\" */ returndatasize()) { _24 := returndatasize() }\n                    finalize_allocation(_21, _24)\n                    expr_5 := abi_decode_uint256_fromMemory(_21, add(_21, _24))\n                }\n                fun_approveTokenIfNeeded(_18, _19, expr_5)\n                /// @src 14:4126:4151  \"uint256 desiredSwapAmount\"\n                let var_desiredSwapAmount := /** @src -1:-1:-1 */ 0\n                /// @src 14:4303:4347  \"ERC20(desiredToken).balanceOf(address(this))\"\n                let _25 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_4)\n                /// @src 14:4303:4347  \"ERC20(desiredToken).balanceOf(address(this))\"\n                mstore(_25, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _22)\n                /// @src 14:4303:4347  \"ERC20(desiredToken).balanceOf(address(this))\"\n                let _26 := staticcall(gas(), _12, _25, sub(abi_encode_address(add(_25, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1), /** @src 14:3636:3640  \"this\" */ address()), /** @src 14:4303:4347  \"ERC20(desiredToken).balanceOf(address(this))\" */ _25), _25, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6)\n                /// @src 14:4303:4347  \"ERC20(desiredToken).balanceOf(address(this))\"\n                if iszero(_26) { revert_forward() }\n                let expr_6 := /** @src -1:-1:-1 */ var_desiredSwapAmount\n                /// @src 14:4303:4347  \"ERC20(desiredToken).balanceOf(address(this))\"\n                if _26\n                {\n                    let _27 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6\n                    /// @src 14:4303:4347  \"ERC20(desiredToken).balanceOf(address(this))\"\n                    if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6, /** @src 14:4303:4347  \"ERC20(desiredToken).balanceOf(address(this))\" */ returndatasize()) { _27 := returndatasize() }\n                    finalize_allocation(_25, _27)\n                    expr_6 := abi_decode_uint256_fromMemory(_25, add(_25, _27))\n                }\n                /// @src 14:4278:4446  \"if (desiredTokenOutMin > ERC20(desiredToken).balanceOf(address(this)))...\"\n                if /** @src 14:4282:4347  \"desiredTokenOutMin > ERC20(desiredToken).balanceOf(address(this))\" */ gt(value3, expr_6)\n                /// @src 14:4278:4446  \"if (desiredTokenOutMin > ERC20(desiredToken).balanceOf(address(this)))...\"\n                {\n                    /// @src 14:4402:4446  \"ERC20(desiredToken).balanceOf(address(this))\"\n                    let _28 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_4)\n                    /// @src 14:4402:4446  \"ERC20(desiredToken).balanceOf(address(this))\"\n                    mstore(_28, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _22)\n                    /// @src 14:4402:4446  \"ERC20(desiredToken).balanceOf(address(this))\"\n                    let _29 := staticcall(gas(), _12, _28, sub(abi_encode_address(add(_28, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1), /** @src 14:3636:3640  \"this\" */ address()), /** @src 14:4402:4446  \"ERC20(desiredToken).balanceOf(address(this))\" */ _28), _28, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6)\n                    /// @src 14:4402:4446  \"ERC20(desiredToken).balanceOf(address(this))\"\n                    if iszero(_29) { revert_forward() }\n                    let expr_7 := /** @src -1:-1:-1 */ var_desiredSwapAmount\n                    /// @src 14:4402:4446  \"ERC20(desiredToken).balanceOf(address(this))\"\n                    if _29\n                    {\n                        let _30 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6\n                        /// @src 14:4402:4446  \"ERC20(desiredToken).balanceOf(address(this))\"\n                        if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6, /** @src 14:4402:4446  \"ERC20(desiredToken).balanceOf(address(this))\" */ returndatasize()) { _30 := returndatasize() }\n                        finalize_allocation(_28, _30)\n                        expr_7 := abi_decode_uint256_fromMemory(_28, add(_28, _30))\n                    }\n                    /// @src 14:4361:4446  \"desiredSwapAmount = desiredTokenOutMin - ERC20(desiredToken).balanceOf(address(this))\"\n                    var_desiredSwapAmount := /** @src 14:4381:4446  \"desiredTokenOutMin - ERC20(desiredToken).balanceOf(address(this))\" */ checked_sub_uint256(value3, expr_7)\n                }\n                /// @src 14:4501:4542  \"ERC20(swapToken).balanceOf(address(this))\"\n                let _31 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_4)\n                /// @src 14:4501:4542  \"ERC20(swapToken).balanceOf(address(this))\"\n                mstore(_31, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _22)\n                /// @src 14:4501:4542  \"ERC20(swapToken).balanceOf(address(this))\"\n                let _32 := staticcall(gas(), _20, _31, sub(abi_encode_address(add(_31, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1), /** @src 14:3636:3640  \"this\" */ address()), /** @src 14:4501:4542  \"ERC20(swapToken).balanceOf(address(this))\" */ _31), _31, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6)\n                /// @src 14:4501:4542  \"ERC20(swapToken).balanceOf(address(this))\"\n                if iszero(_32) { revert_forward() }\n                let expr_8 := /** @src -1:-1:-1 */ 0\n                /// @src 14:4501:4542  \"ERC20(swapToken).balanceOf(address(this))\"\n                if _32\n                {\n                    let _33 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6\n                    /// @src 14:4501:4542  \"ERC20(swapToken).balanceOf(address(this))\"\n                    if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _6, /** @src 14:4501:4542  \"ERC20(swapToken).balanceOf(address(this))\" */ returndatasize()) { _33 := returndatasize() }\n                    finalize_allocation(_31, _33)\n                    expr_8 := abi_decode_uint256_fromMemory(_31, add(_31, _33))\n                }\n                /// @src 14:4456:4657  \"router.swapExactTokensForTokens(...\"\n                let _34 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_4)\n                /// @src 14:4456:4657  \"router.swapExactTokensForTokens(...\"\n                mstore(_34, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(224, 0x38ed1739))\n                /// @src 14:4456:4657  \"router.swapExactTokensForTokens(...\"\n                let _35 := call(gas(), _19, /** @src -1:-1:-1 */ 0, /** @src 14:4456:4657  \"router.swapExactTokensForTokens(...\" */ _34, sub(abi_encode_uint256_uint256_array_address_dyn_address_uint256(add(_34, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1), /** @src 14:4456:4657  \"router.swapExactTokensForTokens(...\" */ expr_8, var_desiredSwapAmount, expr_mpos, /** @src 14:3636:3640  \"this\" */ address(), /** @src 14:4632:4647  \"block.timestamp\" */ timestamp()), /** @src 14:4456:4657  \"router.swapExactTokensForTokens(...\" */ _34), _34, /** @src -1:-1:-1 */ 0)\n                /// @src 14:4456:4657  \"router.swapExactTokensForTokens(...\"\n                if iszero(_35) { revert_forward() }\n                if _35\n                {\n                    let _36 := returndatasize()\n                    returndatacopy(_34, /** @src -1:-1:-1 */ 0, /** @src 14:4456:4657  \"router.swapExactTokensForTokens(...\" */ _36)\n                    finalize_allocation(_34, _36)\n                    pop(abi_decode_array_uint256_dyn_fromMemory(_34, add(_34, _36)))\n                }\n                /// @src 14:4668:4699  \"amountOut = _returnAssets(path)\"\n                let var_amountOut := /** @src 14:4680:4699  \"_returnAssets(path)\" */ fun_returnAssets(expr_mpos)\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let memPos := mload(_4)\n                return(memPos, sub(abi_encode_uint256(memPos, var_amountOut), memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0) { revert(0, 0) }\n            }\n            function convert_contract_IOpenMevRouter_to_address(value) -> converted\n            {\n                converted := and(value, sub(shl(160, 1), 1))\n            }\n            function external_fun_router()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let memPos := mload(64)\n                mstore(memPos, and(/** @src 14:817:855  \"IOpenMevRouter public immutable router\" */ loadimmutable(\"6745\"), /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ sub(shl(160, 1), 1)))\n                return(memPos, 32)\n            }\n            /// @ast-id 6768 @src 14:946:1018  \"receive() external payable {...\"\n            function fun()\n            {\n                /// @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n                if iszero(/** @src 14:990:1010  \"msg.sender == WETH09\" */ eq(/** @src 14:990:1000  \"msg.sender\" */ caller(), /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x01)\n                    revert(0, 0x24)\n                }\n            }\n            /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n            function panic_error_0x41()\n            {\n                mstore(0, /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ shl(224, 0x4e487b71))\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation_5425(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff) { panic_error_0x41() }\n                mstore(64, memPtr)\n            }\n            function finalize_allocation_9727(size)\n            {\n                let newFreePtr := add(128, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, 128)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function abi_decode_address_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                let value := mload(headStart)\n                validator_revert_address(value)\n                value0 := value\n            }\n            function revert_forward()\n            {\n                let pos := mload(64)\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function abi_decode_uint256_fromMemory_9728(dataEnd) -> value0\n            {\n                if slt(add(dataEnd, /** @src 14:5450:5500  \"ERC20(tokenA).allowance(msg.sender, address(this))\" */ not(127)), /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 32) { revert(0, 0) }\n                value0 := mload(128)\n            }\n            function abi_decode_uint256_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                value0 := mload(headStart)\n            }\n            function abi_encode_address_address_9726(value0, value1) -> tail\n            {\n                tail := 196\n                let _1 := sub(shl(160, 1), 1)\n                mstore(/** @src 14:5450:5500  \"ERC20(tokenA).allowance(msg.sender, address(this))\" */ 132, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ and(value0, _1))\n                mstore(164, and(value1, _1))\n            }\n            function abi_encode_address_address(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                let _1 := sub(shl(160, 1), 1)\n                mstore(headStart, and(value0, _1))\n                mstore(add(headStart, 32), and(value1, _1))\n            }\n            function array_allocation_size_array_address_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := add(shl(5, length), 0x20)\n            }\n            function allocate_and_zero_memory_array_array_address_dyn() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                let newFreePtr := add(memPtr_1, 96)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_1)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n                mstore(memPtr_1, /** @src 14:6270:6271  \"2\" */ 0x02)\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                memPtr := memPtr_1\n                calldatacopy(add(memPtr_1, 0x20), calldatasize(), 64)\n            }\n            function memory_array_index_access_address_dyn_5411(baseRef) -> addr\n            {\n                if iszero(mload(baseRef))\n                {\n                    mstore(0, /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ shl(224, 0x4e487b71))\n                    /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(baseRef, 32)\n            }\n            function memory_array_index_access_address_dyn_5412(baseRef) -> addr\n            {\n                if iszero(lt(/** @src 14:6313:6314  \"1\" */ 0x01, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(baseRef)))\n                {\n                    mstore(0, /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ shl(224, 0x4e487b71))\n                    /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(baseRef, 64)\n            }\n            function memory_array_index_access_address_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, mload(baseRef)))\n                {\n                    mstore(0, /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ shl(224, 0x4e487b71))\n                    /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(add(baseRef, shl(5, index)), 32)\n            }\n            function write_to_memory_address_5423(memPtr)\n            {\n                mstore(memPtr, /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)\n            }\n            /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, and(value, sub(shl(160, 1), 1)))\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                returnValue := and(mload(ptr), sub(shl(160, 1), 1))\n            }\n            function abi_encode_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ shl(224, 0x4e487b71))\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                if lt(x, y) { panic_error_0x11() }\n                diff := sub(x, y)\n            }\n            function abi_decode_array_uint256_dyn_fromMemory(headStart, dataEnd) -> value0\n            {\n                let _1 := 32\n                if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n                let offset := mload(headStart)\n                if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                let _2 := add(headStart, offset)\n                if iszero(slt(add(_2, 0x1f), dataEnd))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _3 := mload(_2)\n                let _4 := array_allocation_size_array_address_dyn(_3)\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, _4)\n                let dst := memPtr\n                mstore(memPtr, _3)\n                dst := add(memPtr, _1)\n                let srcEnd := add(add(_2, shl(5, _3)), _1)\n                if gt(srcEnd, dataEnd)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let src := add(_2, _1)\n                for { } lt(src, srcEnd) { src := add(src, _1) }\n                {\n                    mstore(dst, mload(src))\n                    dst := add(dst, _1)\n                }\n                value0 := memPtr\n            }\n            function abi_encode_uint256_uint256_array_address_dyn_address_uint256(headStart, value0, value1, value2, value3, value4) -> tail\n            {\n                let tail_1 := add(headStart, 160)\n                mstore(headStart, value0)\n                let _1 := 32\n                mstore(add(headStart, _1), value1)\n                mstore(add(headStart, 64), 160)\n                let pos := tail_1\n                let length := mload(value2)\n                mstore(tail_1, length)\n                pos := add(headStart, 192)\n                let srcPtr := add(value2, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                tail := pos\n                mstore(add(headStart, 96), and(value3, sub(shl(160, 1), 1)))\n                mstore(add(headStart, 128), value4)\n            }\n            /// @ast-id 6805 @src 14:1182:1482  \"function _approveTokenIfNeeded(...\"\n            function fun_approveTokenIfNeeded_5426(var_spender, var_amount)\n            {\n                /// @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\"\n                let _1 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(64)\n                /// @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\"\n                mstore(_1, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(225, 0x6eb1769f))\n                /// @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\"\n                let _2 := sub(abi_encode_address_address(add(_1, 4), /** @src 14:1361:1365  \"this\" */ address(), /** @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\" */ var_spender), _1)\n                /// @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n                let _3 := 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\n                /// @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\"\n                let _4 := staticcall(gas(), /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ _3, /** @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\" */ _1, _2, _1, 32)\n                if iszero(_4) { revert_forward() }\n                let expr := /** @src -1:-1:-1 */ 0\n                /// @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\"\n                if _4\n                {\n                    let _5 := 32\n                    if gt(_5, returndatasize()) { _5 := returndatasize() }\n                    finalize_allocation(_1, _5)\n                    expr := abi_decode_uint256_fromMemory(_1, add(_1, _5))\n                }\n                /// @src 14:1386:1476  \"if (allowance < amount) {...\"\n                if /** @src 14:1390:1408  \"allowance < amount\" */ lt(expr, var_amount)\n                /// @src 14:1386:1476  \"if (allowance < amount) {...\"\n                {\n                    /// @src 15:4222:5491  \"assembly {...\"\n                    let usr$freeMemoryPointer := mload(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 64)\n                    /// @src 15:4222:5491  \"assembly {...\"\n                    mstore(usr$freeMemoryPointer, shl(224, 0x095ea7b3))\n                    mstore(add(usr$freeMemoryPointer, /** @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\" */ 4), /** @src 15:4222:5491  \"assembly {...\" */ var_spender)\n                    mstore(add(usr$freeMemoryPointer, 36), var_amount)\n                    /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                    if iszero(/** @src 15:4222:5491  \"assembly {...\" */ and(or(and(eq(mload(/** @src -1:-1:-1 */ 0), /** @src 15:4222:5491  \"assembly {...\" */ 1), gt(returndatasize(), 31)), iszero(returndatasize())), call(gas(), /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ _3, /** @src -1:-1:-1 */ 0, /** @src 15:4222:5491  \"assembly {...\" */ usr$freeMemoryPointer, 68, /** @src -1:-1:-1 */ 0, /** @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\" */ 32)))\n                    /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                }\n            }\n            /// @ast-id 6805 @src 14:1182:1482  \"function _approveTokenIfNeeded(...\"\n            function fun_approveTokenIfNeeded(var_token, var_spender, var_amount)\n            {\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _1 := and(/** @src 14:1330:1342  \"ERC20(token)\" */ var_token, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ sub(shl(160, 1), 1))\n                /// @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\"\n                let _2 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(64)\n                /// @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\"\n                mstore(_2, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(225, 0x6eb1769f))\n                /// @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\"\n                let _3 := staticcall(gas(), _1, _2, sub(abi_encode_address_address(add(_2, 4), /** @src 14:1361:1365  \"this\" */ address(), /** @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\" */ var_spender), _2), _2, 32)\n                if iszero(_3) { revert_forward() }\n                let expr := /** @src -1:-1:-1 */ 0\n                /// @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\"\n                if _3\n                {\n                    let _4 := 32\n                    if gt(_4, returndatasize()) { _4 := returndatasize() }\n                    finalize_allocation(_2, _4)\n                    expr := abi_decode_uint256_fromMemory(_2, add(_2, _4))\n                }\n                /// @src 14:1386:1476  \"if (allowance < amount) {...\"\n                if /** @src 14:1390:1408  \"allowance < amount\" */ lt(expr, var_amount)\n                /// @src 14:1386:1476  \"if (allowance < amount) {...\"\n                {\n                    /// @src 15:4222:5491  \"assembly {...\"\n                    let usr$freeMemoryPointer := mload(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 64)\n                    /// @src 15:4222:5491  \"assembly {...\"\n                    mstore(usr$freeMemoryPointer, shl(224, 0x095ea7b3))\n                    mstore(add(usr$freeMemoryPointer, /** @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\" */ 4), /** @src 15:4222:5491  \"assembly {...\" */ var_spender)\n                    mstore(add(usr$freeMemoryPointer, 36), var_amount)\n                    /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                    if iszero(/** @src 15:4222:5491  \"assembly {...\" */ and(or(and(eq(mload(/** @src -1:-1:-1 */ 0), /** @src 15:4222:5491  \"assembly {...\" */ 1), gt(returndatasize(), 31)), iszero(returndatasize())), call(gas(), _1, /** @src -1:-1:-1 */ 0, /** @src 15:4222:5491  \"assembly {...\" */ usr$freeMemoryPointer, 68, /** @src -1:-1:-1 */ 0, /** @src 14:1330:1376  \"ERC20(token).allowance(address(this), spender)\" */ 32)))\n                    /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                }\n            }\n            /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n            function abi_decode_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n                value0 := mload(headStart)\n                value1 := mload(add(headStart, 32))\n            }\n            /// @ast-id 6837 @src 14:1613:1798  \"function _removeLiquidity(address pair, address to) internal {...\"\n            function fun_removeLiquidity(var_pair, var_to)\n            {\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _1 := and(/** @src 14:1684:1695  \"ERC20(pair)\" */ var_pair, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ sub(shl(160, 1), 1))\n                /// @src 14:1715:1751  \"ERC20(pair).balanceOf(address(this))\"\n                let _2 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(64)\n                /// @src 14:1715:1751  \"ERC20(pair).balanceOf(address(this))\"\n                mstore(_2, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(224, 0x70a08231))\n                /// @src 14:1715:1751  \"ERC20(pair).balanceOf(address(this))\"\n                let _3 := staticcall(gas(), _1, _2, sub(abi_encode_address(add(_2, 4), /** @src 14:1745:1749  \"this\" */ address()), /** @src 14:1715:1751  \"ERC20(pair).balanceOf(address(this))\" */ _2), _2, 32)\n                if iszero(_3) { revert_forward() }\n                let expr := /** @src -1:-1:-1 */ 0\n                /// @src 14:1715:1751  \"ERC20(pair).balanceOf(address(this))\"\n                if _3\n                {\n                    let _4 := 32\n                    if gt(_4, returndatasize()) { _4 := returndatasize() }\n                    finalize_allocation(_2, _4)\n                    expr := abi_decode_uint256_fromMemory(_2, add(_2, _4))\n                }\n                fun_safeTransfer(_1, var_pair, expr)\n                /// @src 14:1762:1791  \"IUniswapV2Pair(pair).burn(to)\"\n                let _5 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(64)\n                /// @src 14:1762:1791  \"IUniswapV2Pair(pair).burn(to)\"\n                mstore(_5, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(226, 0x226bf2d1))\n                /// @src 14:1762:1791  \"IUniswapV2Pair(pair).burn(to)\"\n                let _6 := call(gas(), _1, /** @src -1:-1:-1 */ 0, /** @src 14:1762:1791  \"IUniswapV2Pair(pair).burn(to)\" */ _5, sub(abi_encode_address(add(_5, /** @src 14:1715:1751  \"ERC20(pair).balanceOf(address(this))\" */ 4), /** @src 14:1762:1791  \"IUniswapV2Pair(pair).burn(to)\" */ var_to), _5), _5, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 64)\n                /// @src 14:1762:1791  \"IUniswapV2Pair(pair).burn(to)\"\n                if iszero(_6) { revert_forward() }\n                if _6\n                {\n                    let _7 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 64\n                    /// @src 14:1762:1791  \"IUniswapV2Pair(pair).burn(to)\"\n                    if gt(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _7, /** @src 14:1762:1791  \"IUniswapV2Pair(pair).burn(to)\" */ returndatasize()) { _7 := returndatasize() }\n                    finalize_allocation(_5, _7)\n                    let expr_component, expr_component_1 := abi_decode_uint256t_uint256_fromMemory(_5, add(_5, _7))\n                }\n            }\n            /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n            function allocate_and_zero_memory_array_bytes() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                let newFreePtr := add(memPtr_1, 32)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_1)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n                mstore(memPtr_1, 0)\n                memPtr := memPtr_1\n                calldatacopy(newFreePtr, calldatasize(), 0)\n            }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n                    let memPtr := mload(64)\n                    finalize_allocation(memPtr, add(and(add(_1, 31), not(31)), 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ returndatasize())\n                }\n            }\n            /// @ast-id 6933 @src 14:1949:2654  \"function _returnAssets(address[] memory tokens) internal returns (uint256 balance) {...\"\n            function fun_returnAssets(var_tokens_mpos) -> var_balance\n            {\n                /// @src 14:2015:2030  \"uint256 balance\"\n                var_balance := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 0\n                /// @src 14:2015:2030  \"uint256 balance\"\n                let var_balance_1 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 0\n                /// @src 14:2059:2072  \"tokens.length\"\n                let expr := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(/** @src 14:2059:2072  \"tokens.length\" */ var_tokens_mpos)\n                /// @src 14:2087:2096  \"uint256 i\"\n                let var_i := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ var_balance_1\n                /// @src 14:2082:2648  \"for (uint256 i; i < length; i = OpenMevLibrary._inc(i)) {...\"\n                for { }\n                /** @src 14:2098:2108  \"i < length\" */ lt(var_i, expr)\n                /// @src 14:2087:2096  \"uint256 i\"\n                {\n                    /// @src 14:2110:2136  \"i = OpenMevLibrary._inc(i)\"\n                    var_i := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ add(var_i, /** @src 12:20244:20245  \"1\" */ 0x01)\n                }\n                /// @src 14:2110:2136  \"i = OpenMevLibrary._inc(i)\"\n                {\n                    /// @src 14:2162:2188  \"ERC20(tokens[i]).balanceOf\"\n                    let expr_address := convert_contract_IOpenMevRouter_to_address(/** @src 14:2162:2178  \"ERC20(tokens[i])\" */ convert_contract_IOpenMevRouter_to_address(/** @src 14:2168:2177  \"tokens[i]\" */ read_from_memoryt_address(memory_array_index_access_address_dyn(var_tokens_mpos, var_i))))\n                    /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                    let _1 := 64\n                    /// @src 14:2162:2203  \"ERC20(tokens[i]).balanceOf(address(this))\"\n                    let _2 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_1)\n                    /// @src 14:2162:2203  \"ERC20(tokens[i]).balanceOf(address(this))\"\n                    mstore(_2, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(224, 0x70a08231))\n                    /// @src 14:2162:2203  \"ERC20(tokens[i]).balanceOf(address(this))\"\n                    let _3 := 32\n                    let _4 := 4\n                    let _5 := staticcall(gas(), expr_address, _2, sub(abi_encode_address(add(_2, _4), /** @src 14:2197:2201  \"this\" */ address()), /** @src 14:2162:2203  \"ERC20(tokens[i]).balanceOf(address(this))\" */ _2), _2, _3)\n                    if iszero(_5) { revert_forward() }\n                    let expr_1 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ var_balance_1\n                    /// @src 14:2162:2203  \"ERC20(tokens[i]).balanceOf(address(this))\"\n                    if _5\n                    {\n                        let _6 := _3\n                        if gt(_3, returndatasize()) { _6 := returndatasize() }\n                        finalize_allocation(_2, _6)\n                        expr_1 := abi_decode_uint256_fromMemory(_2, add(_2, _6))\n                    }\n                    /// @src 14:2152:2203  \"balance = ERC20(tokens[i]).balanceOf(address(this))\"\n                    var_balance := expr_1\n                    /// @src 14:2217:2638  \"if (OpenMevLibrary._isNonZero(balance)) {...\"\n                    if /** @src 12:19970:20037  \"assembly {...\" */ iszero(iszero(/** @src 14:2221:2255  \"OpenMevLibrary._isNonZero(balance)\" */ expr_1))\n                    /// @src 14:2217:2638  \"if (OpenMevLibrary._isNonZero(balance)) {...\"\n                    {\n                        /// @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n                        let _7 := 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\n                        /// @src 14:2275:2624  \"if (tokens[i] == WETH09) {...\"\n                        switch /** @src 14:2279:2298  \"tokens[i] == WETH09\" */ eq(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ and(/** @src 14:2279:2288  \"tokens[i]\" */ read_from_memoryt_address(memory_array_index_access_address_dyn(var_tokens_mpos, var_i)), /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ sub(shl(160, 1), 1)), /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ _7)\n                        case /** @src 14:2275:2624  \"if (tokens[i] == WETH09) {...\" */ 0 {\n                            /// @src 14:2555:2571  \"ERC20(tokens[i])\"\n                            let expr_6919_address := convert_contract_IOpenMevRouter_to_address(/** @src 14:2561:2570  \"tokens[i]\" */ read_from_memoryt_address(memory_array_index_access_address_dyn(var_tokens_mpos, var_i)))\n                            /// @src 14:2597:2604  \"balance\"\n                            fun_safeTransfer(expr_6919_address, /** @src 14:2585:2595  \"msg.sender\" */ caller(), /** @src 14:2597:2604  \"balance\" */ expr_1)\n                        }\n                        default /// @src 14:2275:2624  \"if (tokens[i] == WETH09) {...\"\n                        {\n                            /// @src 14:2322:2353  \"IWETH(WETH09).withdraw(balance)\"\n                            if iszero(extcodesize(/** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ _7))\n                            /// @src 14:2322:2353  \"IWETH(WETH09).withdraw(balance)\"\n                            {\n                                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                                revert(var_balance_1, var_balance_1)\n                            }\n                            /// @src 14:2322:2353  \"IWETH(WETH09).withdraw(balance)\"\n                            let _8 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_1)\n                            /// @src 14:2322:2353  \"IWETH(WETH09).withdraw(balance)\"\n                            mstore(_8, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shl(224, 0x2e1a7d4d))\n                            /// @src 14:2322:2353  \"IWETH(WETH09).withdraw(balance)\"\n                            let _9 := call(gas(), /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ _7, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ var_balance_1, /** @src 14:2322:2353  \"IWETH(WETH09).withdraw(balance)\" */ _8, sub(abi_encode_uint256(add(_8, /** @src 14:2162:2203  \"ERC20(tokens[i]).balanceOf(address(this))\" */ _4), /** @src 14:2322:2353  \"IWETH(WETH09).withdraw(balance)\" */ expr_1), _8), _8, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ var_balance_1)\n                            /// @src 14:2322:2353  \"IWETH(WETH09).withdraw(balance)\"\n                            if iszero(_9) { revert_forward() }\n                            if _9\n                            {\n                                finalize_allocation_5425(_8)\n                                abi_decode(_8, _8)\n                            }\n                            /// @src 14:2428:2440  \"new bytes(0)\"\n                            let expr_6904_mpos := allocate_and_zero_memory_array_bytes()\n                            /// @src 14:2394:2441  \"msg.sender.call{ value: balance }(new bytes(0))\"\n                            let expr_6905_component := call(gas(), /** @src 14:2394:2404  \"msg.sender\" */ caller(), /** @src 14:2394:2441  \"msg.sender.call{ value: balance }(new bytes(0))\" */ expr_1, add(expr_6904_mpos, /** @src 14:2162:2203  \"ERC20(tokens[i]).balanceOf(address(this))\" */ _3), /** @src 14:2394:2441  \"msg.sender.call{ value: balance }(new bytes(0))\" */ mload(expr_6904_mpos), /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ var_balance_1, var_balance_1)\n                            /// @src 14:2394:2441  \"msg.sender.call{ value: balance }(new bytes(0))\"\n                            pop(extract_returndata())\n                            /// @src 14:2463:2508  \"if (success == false) revert TransferFailed()\"\n                            if /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ iszero(/** @src 14:2467:2483  \"success == false\" */ expr_6905_component)\n                            /// @src 14:2463:2508  \"if (success == false) revert TransferFailed()\"\n                            {\n                                /// @src 14:2492:2508  \"TransferFailed()\"\n                                let _10 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(_1)\n                                /// @src 14:2492:2508  \"TransferFailed()\"\n                                mstore(_10, shl(227, 0x12171d83))\n                                revert(_10, /** @src 14:2162:2203  \"ERC20(tokens[i]).balanceOf(address(this))\" */ _4)\n                            }\n                        }\n                    }\n                }\n            }\n            /// @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\"\n            function abi_decode_uint112_fromMemory(offset) -> value\n            {\n                value := mload(offset)\n                if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffff))) { revert(0, 0) }\n            }\n            function abi_decode_uint112t_uint112t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                    revert(0, 0)\n                }\n                /// @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\"\n                value0 := abi_decode_uint112_fromMemory(headStart)\n                value1 := abi_decode_uint112_fromMemory(add(headStart, 32))\n                let value := mload(add(headStart, 64))\n                if iszero(eq(value, and(value, 0xffffffff)))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 12:719:761  \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\"\n                value2 := value\n            }\n            /// @ast-id 1906 @src 12:3221:3485  \"function pairFor(...\"\n            function fun_pairFor(var_tokenA, var_tokenB) -> var_pair\n            {\n                /// @src 12:3399:3425  \"sortTokens(tokenA, tokenB)\"\n                let var_token0 := /** @src -1:-1:-1 */ 0\n                /// @src 12:3399:3425  \"sortTokens(tokenA, tokenB)\"\n                let var_token1 := /** @src -1:-1:-1 */ var_token0\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _1 := sub(shl(160, 1), 1)\n                /// @src 12:2377:2426  \"if (tokenA == tokenB) revert IdenticalAddresses()\"\n                if /** @src 12:2381:2397  \"tokenA == tokenB\" */ eq(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ and(/** @src 12:2381:2397  \"tokenA == tokenB\" */ var_tokenA, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1), and(/** @src 12:2381:2397  \"tokenA == tokenB\" */ var_tokenB, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _1))\n                /// @src 12:2377:2426  \"if (tokenA == tokenB) revert IdenticalAddresses()\"\n                {\n                    /// @src 12:2406:2426  \"IdenticalAddresses()\"\n                    let _2 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(64)\n                    /// @src 12:2406:2426  \"IdenticalAddresses()\"\n                    mstore(_2, shl(228, 0x0bd969eb))\n                    revert(_2, 4)\n                }\n                /// @src 12:2464:2802  \"assembly {...\"\n                switch lt(shl(96, var_tokenA), shl(96, var_tokenB))\n                case 0 {\n                    var_token0 := var_tokenB\n                    var_token1 := var_tokenA\n                }\n                default {\n                    var_token0 := var_tokenA\n                    var_token1 := var_tokenB\n                }\n                /// @src 12:2811:2850  \"if (isZeroAddress) revert ZeroAddress()\"\n                if /** @src 12:2464:2802  \"assembly {...\" */ iszero(var_token0)\n                /// @src 12:2811:2850  \"if (isZeroAddress) revert ZeroAddress()\"\n                {\n                    /// @src 12:2837:2850  \"ZeroAddress()\"\n                    let _3 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(64)\n                    /// @src 12:2837:2850  \"ZeroAddress()\"\n                    mstore(_3, shl(224, 0xd92e233d))\n                    revert(_3, 4)\n                }\n                /// @src 12:4523:5022  \"assembly {...\"\n                let usr$ptr := mload(0x40)\n                mstore(usr$ptr, shl(/** @src 12:2464:2802  \"assembly {...\" */ 96, /** @src 12:4523:5022  \"assembly {...\" */ var_token0))\n                mstore(add(usr$ptr, 0x14), shl(/** @src 12:2464:2802  \"assembly {...\" */ 96, /** @src 12:4523:5022  \"assembly {...\" */ var_token1))\n                let usr$salt := keccak256(usr$ptr, 0x28)\n                mstore(usr$ptr, /** @src 12:1051:1117  \"0xFFC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac0000000000000000000000\" */ shl(90, 0x3ff02bb91e38d9638984317de928b85ddf3a793cab))\n                /// @src 12:4523:5022  \"assembly {...\"\n                mstore(add(usr$ptr, 0x15), usr$salt)\n                mstore(add(usr$ptr, 0x35), /** @src 12:814:880  \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" */ 0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303)\n                /// @src 12:3435:3478  \"pair = _asmPairFor(factory, token0, token1)\"\n                var_pair := /** @src 12:4523:5022  \"assembly {...\" */ keccak256(usr$ptr, 0x55)\n            }\n            /// @ast-id 1906 @src 12:3221:3485  \"function pairFor(...\"\n            function fun_pairFor_5420(var_tokenB) -> var_pair\n            {\n                /// @src 12:3399:3425  \"sortTokens(tokenA, tokenB)\"\n                let var_token0 := /** @src -1:-1:-1 */ 0\n                /// @src 12:3399:3425  \"sortTokens(tokenA, tokenB)\"\n                let var_token1 := /** @src -1:-1:-1 */ var_token0\n                /// @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n                let _1 := 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\n                /// @src 12:2377:2426  \"if (tokenA == tokenB) revert IdenticalAddresses()\"\n                if /** @src 12:2381:2397  \"tokenA == tokenB\" */ eq(/** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ _1, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ and(/** @src 12:2381:2397  \"tokenA == tokenB\" */ var_tokenB, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ sub(shl(160, 1), 1)))\n                /// @src 12:2377:2426  \"if (tokenA == tokenB) revert IdenticalAddresses()\"\n                {\n                    /// @src 12:2406:2426  \"IdenticalAddresses()\"\n                    let _2 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(64)\n                    /// @src 12:2406:2426  \"IdenticalAddresses()\"\n                    mstore(_2, shl(228, 0x0bd969eb))\n                    revert(_2, 4)\n                }\n                /// @src 12:2464:2802  \"assembly {...\"\n                switch lt(shl(97, 0x6015551cd911ff4685072e2793f56c841e3ab661), shl(96, var_tokenB))\n                case 0 {\n                    var_token0 := var_tokenB\n                    var_token1 := /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ _1\n                }\n                default /// @src 12:2464:2802  \"assembly {...\"\n                {\n                    var_token0 := /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ _1\n                    /// @src 12:2464:2802  \"assembly {...\"\n                    var_token1 := var_tokenB\n                }\n                /// @src 12:2811:2850  \"if (isZeroAddress) revert ZeroAddress()\"\n                if /** @src 12:2464:2802  \"assembly {...\" */ iszero(var_token0)\n                /// @src 12:2811:2850  \"if (isZeroAddress) revert ZeroAddress()\"\n                {\n                    /// @src 12:2837:2850  \"ZeroAddress()\"\n                    let _3 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(64)\n                    /// @src 12:2837:2850  \"ZeroAddress()\"\n                    mstore(_3, shl(224, 0xd92e233d))\n                    revert(_3, 4)\n                }\n                /// @src 12:4523:5022  \"assembly {...\"\n                let usr$ptr := mload(0x40)\n                mstore(usr$ptr, shl(/** @src 12:2464:2802  \"assembly {...\" */ 96, /** @src 12:4523:5022  \"assembly {...\" */ var_token0))\n                mstore(add(usr$ptr, 0x14), shl(/** @src 12:2464:2802  \"assembly {...\" */ 96, /** @src 12:4523:5022  \"assembly {...\" */ var_token1))\n                let usr$salt := keccak256(usr$ptr, 0x28)\n                mstore(usr$ptr, /** @src 12:1051:1117  \"0xFFC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac0000000000000000000000\" */ shl(90, 0x3ff02bb91e38d9638984317de928b85ddf3a793cab))\n                /// @src 12:4523:5022  \"assembly {...\"\n                mstore(add(usr$ptr, 0x15), usr$salt)\n                mstore(add(usr$ptr, 0x35), /** @src 12:814:880  \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" */ 0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303)\n                /// @src 12:3435:3478  \"pair = _asmPairFor(factory, token0, token1)\"\n                var_pair := /** @src 12:4523:5022  \"assembly {...\" */ keccak256(usr$ptr, 0x55)\n            }\n            /// @src 12:1287:1291  \"1000\"\n            function wrapping_div_uint256_5453(x) -> r\n            {\n                r := div(x, /** @src 14:8739:8743  \"1994\" */ 0x07ca)\n            }\n            /// @src 12:1287:1291  \"1000\"\n            function wrapping_div_uint256(x, y) -> r\n            {\n                if iszero(y)\n                {\n                    mstore(0, /** @src 14:768:810  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" */ shl(224, 0x4e487b71))\n                    /// @src 12:1287:1291  \"1000\"\n                    mstore(4, 0x12)\n                    revert(0, 0x24)\n                }\n                r := div(x, y)\n            }\n            /// @ast-id 2095 @src 12:6827:7562  \"function getAmountOut(...\"\n            function fun_getAmountOut(var_amountIn, var_reserveIn, var_reserveOut) -> var_amountOut\n            {\n                /// @src 12:6988:7030  \"if (_isZero(amountIn)) revert ZeroAmount()\"\n                if /** @src 12:19729:19788  \"assembly {...\" */ iszero(/** @src 12:6992:7009  \"_isZero(amountIn)\" */ var_amountIn)\n                /// @src 12:6988:7030  \"if (_isZero(amountIn)) revert ZeroAmount()\"\n                {\n                    /// @src 12:7018:7030  \"ZeroAmount()\"\n                    let _1 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(64)\n                    /// @src 12:7018:7030  \"ZeroAmount()\"\n                    mstore(_1, shl(224, 0x1f2a2005))\n                    revert(_1, 4)\n                }\n                /// @src 12:1287:1291  \"1000\"\n                let _2 := 0x03e8\n                /// @src 12:7044:7107  \"reserveIn < MINIMUM_LIQUIDITY || reserveOut < MINIMUM_LIQUIDITY\"\n                let expr := /** @src 12:7044:7073  \"reserveIn < MINIMUM_LIQUIDITY\" */ lt(var_reserveIn, /** @src 12:1287:1291  \"1000\" */ _2)\n                /// @src 12:7044:7107  \"reserveIn < MINIMUM_LIQUIDITY || reserveOut < MINIMUM_LIQUIDITY\"\n                if iszero(expr)\n                {\n                    expr := /** @src 12:7077:7107  \"reserveOut < MINIMUM_LIQUIDITY\" */ lt(var_reserveOut, /** @src 12:1287:1291  \"1000\" */ _2)\n                }\n                /// @src 12:7040:7139  \"if (reserveIn < MINIMUM_LIQUIDITY || reserveOut < MINIMUM_LIQUIDITY) revert InsufficientLiquidity()\"\n                if expr\n                {\n                    /// @src 12:7116:7139  \"InsufficientLiquidity()\"\n                    let _3 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(64)\n                    /// @src 12:7116:7139  \"InsufficientLiquidity()\"\n                    mstore(_3, shl(224, 0xbb55fd27))\n                    revert(_3, 4)\n                }\n                /// @src 12:7271:7274  \"997\"\n                let _4 := 0x03e5\n                /// @src 12:7252:7275  \"amountIn * uint256(997)\"\n                let expr_1 := /** @src 12:1287:1291  \"1000\" */ mul(/** @src 12:7252:7275  \"amountIn * uint256(997)\" */ var_amountIn, /** @src 12:7271:7274  \"997\" */ _4)\n                /// @src 12:7309:7337  \"amountInWithFee * reserveOut\"\n                let expr_2 := /** @src 12:1287:1291  \"1000\" */ mul(mul(/** @src 12:7252:7275  \"amountIn * uint256(997)\" */ var_amountIn, /** @src 12:7309:7337  \"amountInWithFee * reserveOut\" */ var_reserveOut), /** @src 12:7271:7274  \"997\" */ _4)\n                /// @src 12:7351:7415  \"if (reserveOut != numerator / amountInWithFee) revert Overflow()\"\n                if /** @src 12:7355:7396  \"reserveOut != numerator / amountInWithFee\" */ iszero(eq(var_reserveOut, /** @src 12:7369:7396  \"numerator / amountInWithFee\" */ wrapping_div_uint256(expr_2, expr_1)))\n                /// @src 12:7351:7415  \"if (reserveOut != numerator / amountInWithFee) revert Overflow()\"\n                {\n                    /// @src 12:7405:7415  \"Overflow()\"\n                    let _5 := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mload(64)\n                    /// @src 12:7405:7415  \"Overflow()\"\n                    mstore(_5, shl(225, 0x1a93c689))\n                    revert(_5, 4)\n                }\n                /// @src 12:7510:7545  \"amountOut = numerator / denominator\"\n                var_amountOut := /** @src 12:7522:7545  \"numerator / denominator\" */ wrapping_div_uint256(expr_2, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ add(/** @src 12:1287:1291  \"1000\" */ mul(/** @src 12:7452:7477  \"reserveIn * uint256(1000)\" */ var_reserveIn, /** @src 12:1287:1291  \"1000\" */ _2), /** @src 12:7451:7496  \"(reserveIn * uint256(1000)) + amountInWithFee\" */ expr_1))\n            }\n            /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n            function checked_mul_uint256_5452(x) -> product\n            {\n                /// @src 14:8731:8735  \"1997\"\n                let _1 := 0x07cd\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                if and(iszero(iszero(x)), gt(/** @src 14:8731:8735  \"1997\" */ _1, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ div(not(0), x))) { panic_error_0x11() }\n                product := mul(x, /** @src 14:8731:8735  \"1997\" */ _1)\n            }\n            /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n            function checked_mul_uint256(x, y) -> product\n            {\n                if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n                product := mul(x, y)\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                if gt(x, not(y)) { panic_error_0x11() }\n                sum := add(x, y)\n            }\n            /// @ast-id 7532 @src 14:8538:8750  \"function _getSwapAmount(uint256 userIn, uint256 reserveIn) internal pure returns (uint256) {...\"\n            function fun_getSwapAmount(var_userIn, var_reserveIn) -> var\n            {\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                let _1 := not(0)\n                /// @src 14:8685:8692  \"3988000\"\n                let _2 := 0x3cda20\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                if and(iszero(iszero(var_userIn)), gt(/** @src 14:8685:8692  \"3988000\" */ _2, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ div(_1, var_userIn))) { panic_error_0x11() }\n                /// @src 14:8707:8714  \"3988009\"\n                let _3 := 0x3cda29\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                if and(iszero(iszero(var_reserveIn)), gt(/** @src 14:8707:8714  \"3988009\" */ _3, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ div(_1, var_reserveIn))) { panic_error_0x11() }\n                /// @src 14:8663:8715  \"reserveIn * (userIn * 3988000 + reserveIn * 3988009)\"\n                let _4 := checked_mul_uint256(var_reserveIn, /** @src 14:8676:8714  \"userIn * 3988000 + reserveIn * 3988009\" */ checked_add_uint256(/** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mul(var_userIn, /** @src 14:8685:8692  \"3988000\" */ _2), /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ mul(var_reserveIn, /** @src 14:8707:8714  \"3988009\" */ _3)))\n                /// @src 14:8647:8716  \"Babylonian.sqrt(reserveIn * (userIn * 3988000 + reserveIn * 3988009))\"\n                let var_z := /** @src -1:-1:-1 */ 0\n                /// @src 0:168:398  \"if (y > 3) {...\"\n                switch /** @src 0:172:177  \"y > 3\" */ gt(_4, /** @src 0:176:177  \"3\" */ 0x03)\n                case /** @src 0:168:398  \"if (y > 3) {...\" */ 0 {\n                    /// @src 0:356:398  \"if (y != 0) {...\"\n                    if /** @src 0:360:366  \"y != 0\" */ iszero(iszero(_4))\n                    /// @src 0:356:398  \"if (y != 0) {...\"\n                    {\n                        /// @src 0:382:387  \"z = 1\"\n                        var_z := /** @src 0:386:387  \"1\" */ 0x01\n                    }\n                }\n                default /// @src 0:168:398  \"if (y > 3) {...\"\n                {\n                    /// @src 0:193:198  \"z = y\"\n                    var_z := _4\n                    /// @src 0:230:231  \"1\"\n                    let _5 := 0x01\n                    /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                    let result := shr(/** @src 0:230:231  \"1\" */ _5, /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ _4)\n                    if gt(result, not(1)) { panic_error_0x11() }\n                    /// @src 0:212:236  \"uint256 x = (y >> 1) + 1\"\n                    let var_x := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ add(result, /** @src 0:230:231  \"1\" */ _5)\n                    /// @src 0:250:340  \"while (x < z) {...\"\n                    for { }\n                    /** @src 0:257:262  \"x < z\" */ lt(var_x, var_z)\n                    /// @src 0:250:340  \"while (x < z) {...\"\n                    { }\n                    {\n                        /// @src 0:282:287  \"z = x\"\n                        var_z := var_x\n                        /// @src 0:305:325  \"x = (y / x + x) >> 1\"\n                        var_x := /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ shr(/** @src 0:230:231  \"1\" */ _5, /** @src 0:310:319  \"y / x + x\" */ checked_add_uint256(/** @src 0:310:315  \"y / x\" */ wrapping_div_uint256(_4, var_x), /** @src 0:310:319  \"y / x + x\" */ var_x))\n                    }\n                }\n                /// @src 14:8639:8743  \"return (Babylonian.sqrt(reserveIn * (userIn * 3988000 + reserveIn * 3988009)) - reserveIn * 1997) / 1994\"\n                var := /** @src 14:8646:8743  \"(Babylonian.sqrt(reserveIn * (userIn * 3988000 + reserveIn * 3988009)) - reserveIn * 1997) / 1994\" */ wrapping_div_uint256_5453(/** @src 14:8647:8735  \"Babylonian.sqrt(reserveIn * (userIn * 3988000 + reserveIn * 3988009)) - reserveIn * 1997\" */ checked_sub_uint256(var_z, /** @src 14:8719:8735  \"reserveIn * 1997\" */ checked_mul_uint256_5452(var_reserveIn)))\n            }\n            /// @ast-id 7577 @src 15:1047:2620  \"function safeTransferFrom(...\"\n            function fun_safeTransferFrom(var_token_7558_address, var_from, var_to, var_amount)\n            {\n                /// @src 15:1208:2563  \"assembly {...\"\n                let usr$freeMemoryPointer := mload(0x40)\n                mstore(usr$freeMemoryPointer, shl(224, 0x23b872dd))\n                mstore(add(usr$freeMemoryPointer, 4), var_from)\n                mstore(add(usr$freeMemoryPointer, 36), var_to)\n                mstore(add(usr$freeMemoryPointer, 68), var_amount)\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                if iszero(/** @src 15:1208:2563  \"assembly {...\" */ and(or(and(eq(mload(/** @src -1:-1:-1 */ 0), /** @src 15:1208:2563  \"assembly {...\" */ 1), gt(returndatasize(), 31)), iszero(returndatasize())), call(gas(), var_token_7558_address, /** @src -1:-1:-1 */ 0, /** @src 15:1208:2563  \"assembly {...\" */ usr$freeMemoryPointer, 100, /** @src -1:-1:-1 */ 0, /** @src 15:1208:2563  \"assembly {...\" */ 32)))\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n            }\n            /// @ast-id 7597 @src 15:2626:4082  \"function safeTransfer(...\"\n            function fun_safeTransfer_5427(var_to, var_amount)\n            {\n                /// @src 15:2761:4030  \"assembly {...\"\n                let usr$freeMemoryPointer := mload(0x40)\n                mstore(usr$freeMemoryPointer, shl(224, 0xa9059cbb))\n                mstore(add(usr$freeMemoryPointer, 4), var_to)\n                mstore(add(usr$freeMemoryPointer, 36), var_amount)\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                if iszero(/** @src 15:2761:4030  \"assembly {...\" */ and(or(and(eq(mload(/** @src -1:-1:-1 */ 0), /** @src 15:2761:4030  \"assembly {...\" */ 1), gt(returndatasize(), 31)), iszero(returndatasize())), call(gas(), /** @src 14:438:8752  \"contract OpenMevZapper {...\" */ 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, /** @src -1:-1:-1 */ 0, /** @src 15:2761:4030  \"assembly {...\" */ usr$freeMemoryPointer, 68, /** @src -1:-1:-1 */ 0, /** @src 15:2761:4030  \"assembly {...\" */ 32)))\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n            }\n            /// @ast-id 7597 @src 15:2626:4082  \"function safeTransfer(...\"\n            function fun_safeTransfer(var_token_address, var_to, var_amount)\n            {\n                /// @src 15:2761:4030  \"assembly {...\"\n                let usr$freeMemoryPointer := mload(0x40)\n                mstore(usr$freeMemoryPointer, shl(224, 0xa9059cbb))\n                mstore(add(usr$freeMemoryPointer, 4), var_to)\n                mstore(add(usr$freeMemoryPointer, 36), var_amount)\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                if iszero(/** @src 15:2761:4030  \"assembly {...\" */ and(or(and(eq(mload(/** @src -1:-1:-1 */ 0), /** @src 15:2761:4030  \"assembly {...\" */ 1), gt(returndatasize(), 31)), iszero(returndatasize())), call(gas(), var_token_address, /** @src -1:-1:-1 */ 0, /** @src 15:2761:4030  \"assembly {...\" */ usr$freeMemoryPointer, 68, /** @src -1:-1:-1 */ 0, /** @src 15:2761:4030  \"assembly {...\" */ 32)))\n                /// @src 14:438:8752  \"contract OpenMevZapper {...\"\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n            }\n        }\n        data \".metadata\" hex\"a164736f6c634300080f000a\"\n    }\n}\n",
  "ast": {
    "absolutePath": "OpenMevZapper.sol",
    "id": 7534,
    "exportedSymbols": {
      "Babylonian": [
        57
      ],
      "ERC20": [
        435
      ],
      "IOpenMevRouter": [
        1035
      ],
      "IUniswapV2Factory": [
        1108
      ],
      "IUniswapV2Pair": [
        1350
      ],
      "IWETH": [
        1763
      ],
      "OpenMevLibrary": [
        3158
      ],
      "OpenMevZapper": [
        7533
      ],
      "SafeTransferLib": [
        7618
      ],
      "Uint512": [
        8016
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:8714:14",
    "nodes": [
      {
        "id": 6712,
        "nodeType": "PragmaDirective",
        "src": "39:32:14",
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".15",
          "<",
          "0.9",
          ".0"
        ]
      },
      {
        "id": 6713,
        "nodeType": "ImportDirective",
        "src": "73:21:14",
        "absolutePath": "ERC20.sol",
        "file": "./ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 7534,
        "sourceUnit": 436,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 6714,
        "nodeType": "ImportDirective",
        "src": "95:22:14",
        "absolutePath": "IWETH9.sol",
        "file": "./IWETH9.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 7534,
        "sourceUnit": 1764,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 6715,
        "nodeType": "ImportDirective",
        "src": "118:26:14",
        "absolutePath": "Babylonian.sol",
        "file": "./Babylonian.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 7534,
        "sourceUnit": 58,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 6716,
        "nodeType": "ImportDirective",
        "src": "145:30:14",
        "absolutePath": "OpenMevLibrary.sol",
        "file": "./OpenMevLibrary.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 7534,
        "sourceUnit": 3159,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 6718,
        "nodeType": "ImportDirective",
        "src": "176:56:14",
        "absolutePath": "SafeTransferLib.sol",
        "file": "./SafeTransferLib.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 7534,
        "sourceUnit": 7619,
        "symbolAliases": [
          {
            "foreign": {
              "id": 6717,
              "name": "SafeTransferLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 7618,
              "src": "185:15:14",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 6720,
        "nodeType": "ImportDirective",
        "src": "233:54:14",
        "absolutePath": "IOpenMevRouter.sol",
        "file": "./IOpenMevRouter.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 7534,
        "sourceUnit": 1036,
        "symbolAliases": [
          {
            "foreign": {
              "id": 6719,
              "name": "IOpenMevRouter",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1035,
              "src": "242:14:14",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 7533,
        "nodeType": "ContractDefinition",
        "src": "438:8314:14",
        "nodes": [
          {
            "id": 6725,
            "nodeType": "UsingForDirective",
            "src": "467:32:14",
            "global": false,
            "libraryName": {
              "id": 6722,
              "name": "SafeTransferLib",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7618,
              "src": "473:15:14"
            },
            "typeName": {
              "id": 6724,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 6723,
                "name": "ERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 435,
                "src": "493:5:14"
              },
              "referencedDeclaration": 435,
              "src": "493:5:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$435",
                "typeString": "contract ERC20"
              }
            }
          },
          {
            "id": 6727,
            "nodeType": "ErrorDefinition",
            "src": "505:20:14",
            "errorSelector": "20db8267",
            "name": "InvalidPath",
            "nameLocation": "511:11:14",
            "parameters": {
              "id": 6726,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "522:2:14"
            }
          },
          {
            "id": 6729,
            "nodeType": "ErrorDefinition",
            "src": "530:23:14",
            "errorSelector": "90b8ec18",
            "name": "TransferFailed",
            "nameLocation": "536:14:14",
            "parameters": {
              "id": 6728,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "550:2:14"
            }
          },
          {
            "id": 6731,
            "nodeType": "ErrorDefinition",
            "src": "558:28:14",
            "errorSelector": "ef71d091",
            "name": "InsufficientBAmount",
            "nameLocation": "564:19:14",
            "parameters": {
              "id": 6730,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "583:2:14"
            }
          },
          {
            "id": 6733,
            "nodeType": "ErrorDefinition",
            "src": "591:28:14",
            "errorSelector": "8dc525d1",
            "name": "InsufficientAAmount",
            "nameLocation": "597:19:14",
            "parameters": {
              "id": 6732,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "616:2:14"
            }
          },
          {
            "id": 6735,
            "nodeType": "ErrorDefinition",
            "src": "624:30:14",
            "errorSelector": "13be252b",
            "name": "InsufficientAllowance",
            "nameLocation": "630:21:14",
            "parameters": {
              "id": 6734,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "651:2:14"
            }
          },
          {
            "id": 6737,
            "nodeType": "ErrorDefinition",
            "src": "659:30:14",
            "errorSelector": "bb55fd27",
            "name": "InsufficientLiquidity",
            "nameLocation": "665:21:14",
            "parameters": {
              "id": 6736,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "686:2:14"
            }
          },
          {
            "id": 6739,
            "nodeType": "ErrorDefinition",
            "src": "694:33:14",
            "errorSelector": "42301c23",
            "name": "InsufficientOutputAmount",
            "nameLocation": "700:24:14",
            "parameters": {
              "id": 6738,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "724:2:14"
            }
          },
          {
            "id": 6742,
            "nodeType": "VariableDeclaration",
            "src": "733:77:14",
            "constant": true,
            "mutability": "constant",
            "name": "WETH09",
            "nameLocation": "759:6:14",
            "scope": 7533,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 6740,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "733:7:14",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307843303261614133396232323346453844304130653543344632376541443930383343373536436332",
              "id": 6741,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "768:42:14",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
            },
            "visibility": "internal"
          },
          {
            "id": 6745,
            "nodeType": "VariableDeclaration",
            "src": "817:38:14",
            "constant": false,
            "functionSelector": "f887ea40",
            "mutability": "immutable",
            "name": "router",
            "nameLocation": "849:6:14",
            "scope": 7533,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
              "typeString": "contract IOpenMevRouter"
            },
            "typeName": {
              "id": 6744,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 6743,
                "name": "IOpenMevRouter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 1035,
                "src": "817:14:14"
              },
              "referencedDeclaration": 1035,
              "src": "817:14:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                "typeString": "contract IOpenMevRouter"
              }
            },
            "visibility": "public"
          },
          {
            "id": 6757,
            "nodeType": "FunctionDefinition",
            "src": "862:78:14",
            "body": {
              "id": 6756,
              "nodeType": "Block",
              "src": "891:49:14",
              "statements": [
                {
                  "expression": {
                    "id": 6754,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 6750,
                      "name": "router",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6745,
                      "src": "901:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                        "typeString": "contract IOpenMevRouter"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 6752,
                          "name": "_router",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6747,
                          "src": "925:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 6751,
                        "name": "IOpenMevRouter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1035,
                        "src": "910:14:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IOpenMevRouter_$1035_$",
                          "typeString": "type(contract IOpenMevRouter)"
                        }
                      },
                      "id": 6753,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "910:23:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                        "typeString": "contract IOpenMevRouter"
                      }
                    },
                    "src": "901:32:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                      "typeString": "contract IOpenMevRouter"
                    }
                  },
                  "id": 6755,
                  "nodeType": "ExpressionStatement",
                  "src": "901:32:14"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 6748,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6747,
                  "mutability": "mutable",
                  "name": "_router",
                  "nameLocation": "882:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 6757,
                  "src": "874:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6746,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "874:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "873:17:14"
            },
            "returnParameters": {
              "id": 6749,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "891:0:14"
            },
            "scope": 7533,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 6768,
            "nodeType": "FunctionDefinition",
            "src": "946:72:14",
            "body": {
              "id": 6767,
              "nodeType": "Block",
              "src": "973:45:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 6764,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 6761,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "990:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 6762,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "990:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 6763,
                          "name": "WETH09",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6742,
                          "src": "1004:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "990:20:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 6760,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "983:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 6765,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "983:28:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6766,
                  "nodeType": "ExpressionStatement",
                  "src": "983:28:14"
                }
              ]
            },
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 6758,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "953:2:14"
            },
            "returnParameters": {
              "id": 6759,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "973:0:14"
            },
            "scope": 7533,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 6805,
            "nodeType": "FunctionDefinition",
            "src": "1182:300:14",
            "body": {
              "id": 6804,
              "nodeType": "Block",
              "src": "1300:182:14",
              "statements": [
                {
                  "assignments": [
                    6779
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6779,
                      "mutability": "mutable",
                      "name": "allowance",
                      "nameLocation": "1318:9:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 6804,
                      "src": "1310:17:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 6778,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1310:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 6790,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 6786,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "1361:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          ],
                          "id": 6785,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1353:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 6784,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1353:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 6787,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1353:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 6788,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6773,
                        "src": "1368:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 6781,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6771,
                            "src": "1336:5:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 6780,
                          "name": "ERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 435,
                          "src": "1330:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                            "typeString": "type(contract ERC20)"
                          }
                        },
                        "id": 6782,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1330:12:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$435",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 6783,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "allowance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 133,
                      "src": "1330:22:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address,address) view external returns (uint256)"
                      }
                    },
                    "id": 6789,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1330:46:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1310:66:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 6793,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 6791,
                      "name": "allowance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6779,
                      "src": "1390:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 6792,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6775,
                      "src": "1402:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1390:18:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 6803,
                  "nodeType": "IfStatement",
                  "src": "1386:90:14",
                  "trueBody": {
                    "id": 6802,
                    "nodeType": "Block",
                    "src": "1410:66:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 6798,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6773,
                              "src": "1449:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 6799,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6775,
                              "src": "1458:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 6795,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 6771,
                                  "src": "1430:5:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 6794,
                                "name": "ERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 435,
                                "src": "1424:5:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                                  "typeString": "type(contract ERC20)"
                                }
                              },
                              "id": 6796,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1424:12:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$435",
                                "typeString": "contract ERC20"
                              }
                            },
                            "id": 6797,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeApprove",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 7617,
                            "src": "1424:24:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$435_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$435_$",
                              "typeString": "function (contract ERC20,address,uint256)"
                            }
                          },
                          "id": 6800,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1424:41:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 6801,
                        "nodeType": "ExpressionStatement",
                        "src": "1424:41:14"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 6769,
              "nodeType": "StructuredDocumentation",
              "src": "1024:153:14",
              "text": "@notice Approve router to spend max tokens if allowance doesn't exist\n @param token Token to approve\n @param spender Spender to approve"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_approveTokenIfNeeded",
            "nameLocation": "1191:21:14",
            "parameters": {
              "id": 6776,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6771,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "1230:5:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 6805,
                  "src": "1222:13:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6770,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1222:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6773,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "1253:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 6805,
                  "src": "1245:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6772,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1245:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6775,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1278:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 6805,
                  "src": "1270:14:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6774,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1270:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1212:78:14"
            },
            "returnParameters": {
              "id": 6777,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1300:0:14"
            },
            "scope": 7533,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 6837,
            "nodeType": "FunctionDefinition",
            "src": "1613:185:14",
            "body": {
              "id": 6836,
              "nodeType": "Block",
              "src": "1674:124:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 6817,
                        "name": "pair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6808,
                        "src": "1709:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 6824,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "1745:4:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                  "typeString": "contract OpenMevZapper"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                  "typeString": "contract OpenMevZapper"
                                }
                              ],
                              "id": 6823,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1737:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 6822,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1737:7:14",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 6825,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1737:13:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 6819,
                                "name": "pair",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 6808,
                                "src": "1721:4:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 6818,
                              "name": "ERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 435,
                              "src": "1715:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                                "typeString": "type(contract ERC20)"
                              }
                            },
                            "id": 6820,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1715:11:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$435",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 6821,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balanceOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 127,
                          "src": "1715:21:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 6826,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1715:36:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 6814,
                            "name": "pair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6808,
                            "src": "1690:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 6813,
                          "name": "ERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 435,
                          "src": "1684:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                            "typeString": "type(contract ERC20)"
                          }
                        },
                        "id": 6815,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1684:11:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$435",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 6816,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7597,
                      "src": "1684:24:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$435_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$435_$",
                        "typeString": "function (contract ERC20,address,uint256)"
                      }
                    },
                    "id": 6827,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1684:68:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6828,
                  "nodeType": "ExpressionStatement",
                  "src": "1684:68:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 6833,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6810,
                        "src": "1788:2:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 6830,
                            "name": "pair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6808,
                            "src": "1777:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 6829,
                          "name": "IUniswapV2Pair",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1350,
                          "src": "1762:14:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IUniswapV2Pair_$1350_$",
                            "typeString": "type(contract IUniswapV2Pair)"
                          }
                        },
                        "id": 6831,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1762:20:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IUniswapV2Pair_$1350",
                          "typeString": "contract IUniswapV2Pair"
                        }
                      },
                      "id": 6832,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1323,
                      "src": "1762:25:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_uint256_$_t_uint256_$",
                        "typeString": "function (address) external returns (uint256,uint256)"
                      }
                    },
                    "id": 6834,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1762:29:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "id": 6835,
                  "nodeType": "ExpressionStatement",
                  "src": "1762:29:14"
                }
              ]
            },
            "documentation": {
              "id": 6806,
              "nodeType": "StructuredDocumentation",
              "src": "1488:120:14",
              "text": "@notice Withdraw liquidity from V2 pair\n @param pair Pair address\n @param to Address of token receiver"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_removeLiquidity",
            "nameLocation": "1622:16:14",
            "parameters": {
              "id": 6811,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6808,
                  "mutability": "mutable",
                  "name": "pair",
                  "nameLocation": "1647:4:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 6837,
                  "src": "1639:12:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6807,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1639:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6810,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "1661:2:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 6837,
                  "src": "1653:10:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6809,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1653:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1638:26:14"
            },
            "returnParameters": {
              "id": 6812,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1674:0:14"
            },
            "scope": 7533,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 6933,
            "nodeType": "FunctionDefinition",
            "src": "1949:705:14",
            "body": {
              "id": 6932,
              "nodeType": "Block",
              "src": "2032:622:14",
              "statements": [
                {
                  "assignments": [
                    6847
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6847,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "2050:6:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 6932,
                      "src": "2042:14:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 6846,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2042:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 6850,
                  "initialValue": {
                    "expression": {
                      "id": 6848,
                      "name": "tokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6841,
                      "src": "2059:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[] memory"
                      }
                    },
                    "id": 6849,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "2059:13:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2042:30:14"
                },
                {
                  "body": {
                    "id": 6930,
                    "nodeType": "Block",
                    "src": "2138:510:14",
                    "statements": [
                      {
                        "expression": {
                          "id": 6876,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 6864,
                            "name": "balance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6844,
                            "src": "2152:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 6873,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "2197:4:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                      "typeString": "contract OpenMevZapper"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                      "typeString": "contract OpenMevZapper"
                                    }
                                  ],
                                  "id": 6872,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2189:7:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 6871,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2189:7:14",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 6874,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2189:13:14",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 6866,
                                      "name": "tokens",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 6841,
                                      "src": "2168:6:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                        "typeString": "address[] memory"
                                      }
                                    },
                                    "id": 6868,
                                    "indexExpression": {
                                      "id": 6867,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 6852,
                                      "src": "2175:1:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2168:9:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 6865,
                                  "name": "ERC20",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 435,
                                  "src": "2162:5:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                                    "typeString": "type(contract ERC20)"
                                  }
                                },
                                "id": 6869,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2162:16:14",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_ERC20_$435",
                                  "typeString": "contract ERC20"
                                }
                              },
                              "id": 6870,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "balanceOf",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 127,
                              "src": "2162:26:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view external returns (uint256)"
                              }
                            },
                            "id": 6875,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2162:41:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2152:51:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 6877,
                        "nodeType": "ExpressionStatement",
                        "src": "2152:51:14"
                      },
                      {
                        "condition": {
                          "arguments": [
                            {
                              "id": 6880,
                              "name": "balance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6844,
                              "src": "2247:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 6878,
                              "name": "OpenMevLibrary",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3158,
                              "src": "2221:14:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_OpenMevLibrary_$3158_$",
                                "typeString": "type(library OpenMevLibrary)"
                              }
                            },
                            "id": 6879,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "_isNonZero",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3129,
                            "src": "2221:25:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (uint256) pure returns (bool)"
                            }
                          },
                          "id": 6881,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2221:34:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 6929,
                        "nodeType": "IfStatement",
                        "src": "2217:421:14",
                        "trueBody": {
                          "id": 6928,
                          "nodeType": "Block",
                          "src": "2257:381:14",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 6886,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "baseExpression": {
                                    "id": 6882,
                                    "name": "tokens",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 6841,
                                    "src": "2279:6:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                      "typeString": "address[] memory"
                                    }
                                  },
                                  "id": 6884,
                                  "indexExpression": {
                                    "id": 6883,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 6852,
                                    "src": "2286:1:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2279:9:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "id": 6885,
                                  "name": "WETH09",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 6742,
                                  "src": "2292:6:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "2279:19:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 6926,
                                "nodeType": "Block",
                                "src": "2533:91:14",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "expression": {
                                            "id": 6921,
                                            "name": "msg",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -15,
                                            "src": "2585:3:14",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_magic_message",
                                              "typeString": "msg"
                                            }
                                          },
                                          "id": 6922,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "sender",
                                          "nodeType": "MemberAccess",
                                          "src": "2585:10:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 6923,
                                          "name": "balance",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 6844,
                                          "src": "2597:7:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "arguments": [
                                            {
                                              "baseExpression": {
                                                "id": 6916,
                                                "name": "tokens",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 6841,
                                                "src": "2561:6:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                                  "typeString": "address[] memory"
                                                }
                                              },
                                              "id": 6918,
                                              "indexExpression": {
                                                "id": 6917,
                                                "name": "i",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 6852,
                                                "src": "2568:1:14",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "2561:9:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "id": 6915,
                                            "name": "ERC20",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 435,
                                            "src": "2555:5:14",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                                              "typeString": "type(contract ERC20)"
                                            }
                                          },
                                          "id": 6919,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "2555:16:14",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_ERC20_$435",
                                            "typeString": "contract ERC20"
                                          }
                                        },
                                        "id": 6920,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "safeTransfer",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 7597,
                                        "src": "2555:29:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$435_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$435_$",
                                          "typeString": "function (contract ERC20,address,uint256)"
                                        }
                                      },
                                      "id": 6924,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2555:50:14",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 6925,
                                    "nodeType": "ExpressionStatement",
                                    "src": "2555:50:14"
                                  }
                                ]
                              },
                              "id": 6927,
                              "nodeType": "IfStatement",
                              "src": "2275:349:14",
                              "trueBody": {
                                "id": 6914,
                                "nodeType": "Block",
                                "src": "2300:227:14",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 6891,
                                          "name": "balance",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 6844,
                                          "src": "2345:7:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "arguments": [
                                            {
                                              "id": 6888,
                                              "name": "WETH09",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 6742,
                                              "src": "2328:6:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "id": 6887,
                                            "name": "IWETH",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1763,
                                            "src": "2322:5:14",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_contract$_IWETH_$1763_$",
                                              "typeString": "type(contract IWETH)"
                                            }
                                          },
                                          "id": 6889,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "2322:13:14",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IWETH_$1763",
                                            "typeString": "contract IWETH"
                                          }
                                        },
                                        "id": 6890,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "withdraw",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1762,
                                        "src": "2322:22:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                                          "typeString": "function (uint256) external"
                                        }
                                      },
                                      "id": 6892,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2322:31:14",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 6893,
                                    "nodeType": "ExpressionStatement",
                                    "src": "2322:31:14"
                                  },
                                  {
                                    "assignments": [
                                      6895,
                                      null
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 6895,
                                        "mutability": "mutable",
                                        "name": "success",
                                        "nameLocation": "2381:7:14",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 6914,
                                        "src": "2376:12:14",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "typeName": {
                                          "id": 6894,
                                          "name": "bool",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "2376:4:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "visibility": "internal"
                                      },
                                      null
                                    ],
                                    "id": 6906,
                                    "initialValue": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "hexValue": "30",
                                              "id": 6903,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "2438:1:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_0_by_1",
                                                "typeString": "int_const 0"
                                              },
                                              "value": "0"
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_rational_0_by_1",
                                                "typeString": "int_const 0"
                                              }
                                            ],
                                            "id": 6902,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "NewExpression",
                                            "src": "2428:9:14",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                                              "typeString": "function (uint256) pure returns (bytes memory)"
                                            },
                                            "typeName": {
                                              "id": 6901,
                                              "name": "bytes",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "2432:5:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes_storage_ptr",
                                                "typeString": "bytes"
                                              }
                                            }
                                          },
                                          "id": 6904,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "2428:12:14",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          ],
                                          "expression": {
                                            "expression": {
                                              "id": 6896,
                                              "name": "msg",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": -15,
                                              "src": "2394:3:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_magic_message",
                                                "typeString": "msg"
                                              }
                                            },
                                            "id": 6897,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "sender",
                                            "nodeType": "MemberAccess",
                                            "src": "2394:10:14",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "id": 6898,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "call",
                                          "nodeType": "MemberAccess",
                                          "src": "2394:15:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                          }
                                        },
                                        "id": 6900,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "names": [
                                          "value"
                                        ],
                                        "nodeType": "FunctionCallOptions",
                                        "options": [
                                          {
                                            "id": 6899,
                                            "name": "balance",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 6844,
                                            "src": "2418:7:14",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "src": "2394:33:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                        }
                                      },
                                      "id": 6905,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2394:47:14",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                        "typeString": "tuple(bool,bytes memory)"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "2375:66:14"
                                  },
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 6909,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 6907,
                                        "name": "success",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 6895,
                                        "src": "2467:7:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "hexValue": "66616c7365",
                                        "id": 6908,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "2478:5:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "false"
                                      },
                                      "src": "2467:16:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 6913,
                                    "nodeType": "IfStatement",
                                    "src": "2463:45:14",
                                    "trueBody": {
                                      "errorCall": {
                                        "arguments": [],
                                        "expression": {
                                          "argumentTypes": [],
                                          "id": 6910,
                                          "name": "TransferFailed",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 6729,
                                          "src": "2492:14:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                            "typeString": "function () pure"
                                          }
                                        },
                                        "id": 6911,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "2492:16:14",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_tuple$__$",
                                          "typeString": "tuple()"
                                        }
                                      },
                                      "id": 6912,
                                      "nodeType": "RevertStatement",
                                      "src": "2485:23:14"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 6856,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 6854,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6852,
                      "src": "2098:1:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 6855,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6847,
                      "src": "2102:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2098:10:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 6931,
                  "initializationExpression": {
                    "assignments": [
                      6852
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 6852,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2095:1:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 6931,
                        "src": "2087:9:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 6851,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2087:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 6853,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2087:9:14"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 6862,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftHandSide": {
                        "id": 6857,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6852,
                        "src": "2110:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Assignment",
                      "operator": "=",
                      "rightHandSide": {
                        "arguments": [
                          {
                            "id": 6860,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6852,
                            "src": "2134:1:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 6858,
                            "name": "OpenMevLibrary",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3158,
                            "src": "2114:14:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_OpenMevLibrary_$3158_$",
                              "typeString": "type(library OpenMevLibrary)"
                            }
                          },
                          "id": 6859,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_inc",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3143,
                          "src": "2114:19:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) pure returns (uint256)"
                          }
                        },
                        "id": 6861,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2114:22:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "2110:26:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 6863,
                    "nodeType": "ExpressionStatement",
                    "src": "2110:26:14"
                  },
                  "nodeType": "ForStatement",
                  "src": "2082:566:14"
                }
              ]
            },
            "documentation": {
              "id": 6838,
              "nodeType": "StructuredDocumentation",
              "src": "1804:140:14",
              "text": "@notice Returns assets to sender\n @param tokens Array of tokens to return\n @return balance amount of tokenDesired received"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_returnAssets",
            "nameLocation": "1958:13:14",
            "parameters": {
              "id": 6842,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6841,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "1989:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 6933,
                  "src": "1972:23:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6839,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1972:7:14",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 6840,
                    "nodeType": "ArrayTypeName",
                    "src": "1972:9:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1971:25:14"
            },
            "returnParameters": {
              "id": 6845,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6844,
                  "mutability": "mutable",
                  "name": "balance",
                  "nameLocation": "2023:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 6933,
                  "src": "2015:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6843,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2015:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2014:17:14"
            },
            "scope": 7533,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 7124,
            "nodeType": "FunctionDefinition",
            "src": "3146:1560:14",
            "body": {
              "id": 7123,
              "nodeType": "Block",
              "src": "3350:1356:14",
              "statements": [
                {
                  "assignments": [
                    6949
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6949,
                      "mutability": "mutable",
                      "name": "pair",
                      "nameLocation": "3375:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7123,
                      "src": "3360:19:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IUniswapV2Pair_$1350",
                        "typeString": "contract IUniswapV2Pair"
                      },
                      "typeName": {
                        "id": 6948,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 6947,
                          "name": "IUniswapV2Pair",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1350,
                          "src": "3360:14:14"
                        },
                        "referencedDeclaration": 1350,
                        "src": "3360:14:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IUniswapV2Pair_$1350",
                          "typeString": "contract IUniswapV2Pair"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 6953,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 6951,
                        "name": "pairAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6936,
                        "src": "3397:11:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 6950,
                      "name": "IUniswapV2Pair",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1350,
                      "src": "3382:14:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IUniswapV2Pair_$1350_$",
                        "typeString": "type(contract IUniswapV2Pair)"
                      }
                    },
                    "id": 6952,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3382:27:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IUniswapV2Pair_$1350",
                      "typeString": "contract IUniswapV2Pair"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3360:49:14"
                },
                {
                  "assignments": [
                    6955
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6955,
                      "mutability": "mutable",
                      "name": "token0",
                      "nameLocation": "3427:6:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7123,
                      "src": "3419:14:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 6954,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3419:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 6959,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 6956,
                        "name": "pair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6949,
                        "src": "3436:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IUniswapV2Pair_$1350",
                          "typeString": "contract IUniswapV2Pair"
                        }
                      },
                      "id": 6957,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "token0",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1278,
                      "src": "3436:11:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 6958,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3436:13:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3419:30:14"
                },
                {
                  "assignments": [
                    6961
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6961,
                      "mutability": "mutable",
                      "name": "token1",
                      "nameLocation": "3467:6:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7123,
                      "src": "3459:14:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 6960,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3459:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 6965,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 6962,
                        "name": "pair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6949,
                        "src": "3476:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IUniswapV2Pair_$1350",
                          "typeString": "contract IUniswapV2Pair"
                        }
                      },
                      "id": 6963,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "token1",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1283,
                      "src": "3476:11:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 6964,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3476:13:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3459:30:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 6972,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 6968,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 6966,
                        "name": "token0",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6955,
                        "src": "3503:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "id": 6967,
                        "name": "desiredToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6940,
                        "src": "3513:12:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "3503:22:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 6971,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 6969,
                        "name": "token1",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6961,
                        "src": "3529:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "id": 6970,
                        "name": "desiredToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6940,
                        "src": "3539:12:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "3529:22:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3503:48:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 6976,
                  "nodeType": "IfStatement",
                  "src": "3499:74:14",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 6973,
                        "name": "InvalidPath",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6727,
                        "src": "3560:11:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 6974,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3560:13:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 6975,
                    "nodeType": "RevertStatement",
                    "src": "3553:20:14"
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 6989,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 6981,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "3616:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 6982,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "3616:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "id": 6985,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "3636:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                "typeString": "contract OpenMevZapper"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                "typeString": "contract OpenMevZapper"
                              }
                            ],
                            "id": 6984,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3628:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 6983,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3628:7:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 6986,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3628:13:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "id": 6978,
                              "name": "pairAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6936,
                              "src": "3593:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 6977,
                            "name": "ERC20",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 435,
                            "src": "3587:5:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                              "typeString": "type(contract ERC20)"
                            }
                          },
                          "id": 6979,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3587:18:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ERC20_$435",
                            "typeString": "contract ERC20"
                          }
                        },
                        "id": 6980,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "allowance",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 133,
                        "src": "3587:28:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                          "typeString": "function (address,address) view external returns (uint256)"
                        }
                      },
                      "id": 6987,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3587:55:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 6988,
                      "name": "withdrawAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6938,
                      "src": "3645:14:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3587:72:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 6993,
                  "nodeType": "IfStatement",
                  "src": "3583:108:14",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 6990,
                        "name": "InsufficientAllowance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6735,
                        "src": "3668:21:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 6991,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3668:23:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 6992,
                    "nodeType": "RevertStatement",
                    "src": "3661:30:14"
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 6998,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3737:3:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 6999,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3737:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 7002,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "3757:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          ],
                          "id": 7001,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3749:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 7000,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3749:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 7003,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3749:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7004,
                        "name": "withdrawAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6938,
                        "src": "3764:14:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 6995,
                            "name": "pairAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6936,
                            "src": "3707:11:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 6994,
                          "name": "ERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 435,
                          "src": "3701:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                            "typeString": "type(contract ERC20)"
                          }
                        },
                        "id": 6996,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3701:18:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$435",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 6997,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7577,
                      "src": "3701:35:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$435_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$435_$",
                        "typeString": "function (contract ERC20,address,address,uint256)"
                      }
                    },
                    "id": 7005,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3701:78:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7006,
                  "nodeType": "ExpressionStatement",
                  "src": "3701:78:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7008,
                        "name": "pairAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6936,
                        "src": "3806:11:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 7011,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "3827:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          ],
                          "id": 7010,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3819:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 7009,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3819:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 7012,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3819:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 7007,
                      "name": "_removeLiquidity",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6837,
                      "src": "3789:16:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 7013,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3789:44:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7014,
                  "nodeType": "ExpressionStatement",
                  "src": "3789:44:14"
                },
                {
                  "assignments": [
                    7016
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7016,
                      "mutability": "mutable",
                      "name": "swapToken",
                      "nameLocation": "3852:9:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7123,
                      "src": "3844:17:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 7015,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3844:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7023,
                  "initialValue": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 7019,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 7017,
                        "name": "token1",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6961,
                        "src": "3864:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "id": 7018,
                        "name": "desiredToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6940,
                        "src": "3874:12:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "3864:22:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 7021,
                      "name": "token1",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6961,
                      "src": "3898:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 7022,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "3864:40:14",
                    "trueExpression": {
                      "id": 7020,
                      "name": "token0",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6955,
                      "src": "3889:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3844:60:14"
                },
                {
                  "assignments": [
                    7028
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7028,
                      "mutability": "mutable",
                      "name": "path",
                      "nameLocation": "3931:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7123,
                      "src": "3914:21:14",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 7026,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3914:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 7027,
                        "nodeType": "ArrayTypeName",
                        "src": "3914:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7034,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "32",
                        "id": 7032,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3952:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        }
                      ],
                      "id": 7031,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "3938:13:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (address[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 7029,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3942:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 7030,
                        "nodeType": "ArrayTypeName",
                        "src": "3942:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      }
                    },
                    "id": 7033,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3938:16:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3914:40:14"
                },
                {
                  "expression": {
                    "id": 7039,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 7035,
                        "name": "path",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7028,
                        "src": "3964:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 7037,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 7036,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3969:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3964:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 7038,
                      "name": "swapToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7016,
                      "src": "3974:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3964:19:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 7040,
                  "nodeType": "ExpressionStatement",
                  "src": "3964:19:14"
                },
                {
                  "expression": {
                    "id": 7045,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 7041,
                        "name": "path",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7028,
                        "src": "3993:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 7043,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 7042,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3998:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3993:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 7044,
                      "name": "desiredToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6940,
                      "src": "4003:12:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3993:22:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 7046,
                  "nodeType": "ExpressionStatement",
                  "src": "3993:22:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 7048,
                          "name": "path",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7028,
                          "src": "4048:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[] memory"
                          }
                        },
                        "id": 7050,
                        "indexExpression": {
                          "hexValue": "30",
                          "id": 7049,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4053:1:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4048:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 7053,
                            "name": "router",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6745,
                            "src": "4065:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                              "typeString": "contract IOpenMevRouter"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                              "typeString": "contract IOpenMevRouter"
                            }
                          ],
                          "id": 7052,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4057:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 7051,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4057:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 7054,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4057:15:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 7061,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "4109:4:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                  "typeString": "contract OpenMevZapper"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                  "typeString": "contract OpenMevZapper"
                                }
                              ],
                              "id": 7060,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4101:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 7059,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4101:7:14",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 7062,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4101:13:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 7056,
                                "name": "swapToken",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7016,
                                "src": "4080:9:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 7055,
                              "name": "ERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 435,
                              "src": "4074:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                                "typeString": "type(contract ERC20)"
                              }
                            },
                            "id": 7057,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4074:16:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$435",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 7058,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balanceOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 127,
                          "src": "4074:26:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 7063,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4074:41:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 7047,
                      "name": "_approveTokenIfNeeded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6805,
                      "src": "4026:21:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 7064,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4026:90:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7065,
                  "nodeType": "ExpressionStatement",
                  "src": "4026:90:14"
                },
                {
                  "assignments": [
                    7067
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7067,
                      "mutability": "mutable",
                      "name": "desiredSwapAmount",
                      "nameLocation": "4134:17:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7123,
                      "src": "4126:25:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7066,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4126:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7068,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4126:25:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 7079,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 7069,
                      "name": "desiredTokenOutMin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6942,
                      "src": "4282:18:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 7076,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "4341:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                "typeString": "contract OpenMevZapper"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                "typeString": "contract OpenMevZapper"
                              }
                            ],
                            "id": 7075,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4333:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 7074,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4333:7:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 7077,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4333:13:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "id": 7071,
                              "name": "desiredToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6940,
                              "src": "4309:12:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 7070,
                            "name": "ERC20",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 435,
                            "src": "4303:5:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                              "typeString": "type(contract ERC20)"
                            }
                          },
                          "id": 7072,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4303:19:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ERC20_$435",
                            "typeString": "contract ERC20"
                          }
                        },
                        "id": 7073,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "balanceOf",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 127,
                        "src": "4303:29:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                          "typeString": "function (address) view external returns (uint256)"
                        }
                      },
                      "id": 7078,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4303:44:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4282:65:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 7094,
                  "nodeType": "IfStatement",
                  "src": "4278:168:14",
                  "trueBody": {
                    "expression": {
                      "id": 7092,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftHandSide": {
                        "id": 7080,
                        "name": "desiredSwapAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7067,
                        "src": "4361:17:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Assignment",
                      "operator": "=",
                      "rightHandSide": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 7091,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 7081,
                          "name": "desiredTokenOutMin",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6942,
                          "src": "4381:18:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 7088,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "4440:4:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                    "typeString": "contract OpenMevZapper"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                    "typeString": "contract OpenMevZapper"
                                  }
                                ],
                                "id": 7087,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4432:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 7086,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4432:7:14",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 7089,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4432:13:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 7083,
                                  "name": "desiredToken",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 6940,
                                  "src": "4408:12:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 7082,
                                "name": "ERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 435,
                                "src": "4402:5:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                                  "typeString": "type(contract ERC20)"
                                }
                              },
                              "id": 7084,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4402:19:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$435",
                                "typeString": "contract ERC20"
                              }
                            },
                            "id": 7085,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 127,
                            "src": "4402:29:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 7090,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4402:44:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4381:65:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4361:85:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 7093,
                    "nodeType": "ExpressionStatement",
                    "src": "4361:85:14"
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 7104,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "4536:4:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                  "typeString": "contract OpenMevZapper"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                  "typeString": "contract OpenMevZapper"
                                }
                              ],
                              "id": 7103,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4528:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 7102,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4528:7:14",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 7105,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4528:13:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 7099,
                                "name": "swapToken",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7016,
                                "src": "4507:9:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 7098,
                              "name": "ERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 435,
                              "src": "4501:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                                "typeString": "type(contract ERC20)"
                              }
                            },
                            "id": 7100,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4501:16:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$435",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 7101,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balanceOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 127,
                          "src": "4501:26:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 7106,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4501:41:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 7107,
                        "name": "desiredSwapAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7067,
                        "src": "4556:17:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 7108,
                        "name": "path",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7028,
                        "src": "4587:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 7111,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "4613:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          ],
                          "id": 7110,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4605:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 7109,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4605:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 7112,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4605:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 7113,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "4632:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 7114,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "4632:15:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 7095,
                        "name": "router",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6745,
                        "src": "4456:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                          "typeString": "contract IOpenMevRouter"
                        }
                      },
                      "id": 7097,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "swapExactTokensForTokens",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 805,
                      "src": "4456:31:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                        "typeString": "function (uint256,uint256,address[] memory,address,uint256) external returns (uint256[] memory)"
                      }
                    },
                    "id": 7115,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4456:201:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "id": 7116,
                  "nodeType": "ExpressionStatement",
                  "src": "4456:201:14"
                },
                {
                  "expression": {
                    "id": 7121,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7117,
                      "name": "amountOut",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6945,
                      "src": "4668:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 7119,
                          "name": "path",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7028,
                          "src": "4694:4:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[] memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[] memory"
                          }
                        ],
                        "id": 7118,
                        "name": "_returnAssets",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6933,
                        "src": "4680:13:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$_t_uint256_$",
                          "typeString": "function (address[] memory) returns (uint256)"
                        }
                      },
                      "id": 7120,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4680:19:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4668:31:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 7122,
                  "nodeType": "ExpressionStatement",
                  "src": "4668:31:14"
                }
              ]
            },
            "documentation": {
              "id": 6934,
              "nodeType": "StructuredDocumentation",
              "src": "2660:481:14",
              "text": "@notice Removes liquidity from an ERC-20⇄ERC-20 pool into a single token / ETH . msg.sender should have already given the zapper an allowance of at least liquidity on the pool.\n @param pairAddress Address of V2 pool\n @param withdrawAmount Amount of liquidity to withdraw\n @param desiredToken Withdrawl token desired\n @param desiredTokenOutMin Minimum amount of total desiredToken, can be 0\n @return amountOut Amount of desiredToken received"
            },
            "functionSelector": "ef409f90",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawLiquidityAndSwap",
            "nameLocation": "3155:24:14",
            "parameters": {
              "id": 6943,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6936,
                  "mutability": "mutable",
                  "name": "pairAddress",
                  "nameLocation": "3197:11:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7124,
                  "src": "3189:19:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6935,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3189:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6938,
                  "mutability": "mutable",
                  "name": "withdrawAmount",
                  "nameLocation": "3226:14:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7124,
                  "src": "3218:22:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6937,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3218:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6940,
                  "mutability": "mutable",
                  "name": "desiredToken",
                  "nameLocation": "3258:12:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7124,
                  "src": "3250:20:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6939,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3250:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6942,
                  "mutability": "mutable",
                  "name": "desiredTokenOutMin",
                  "nameLocation": "3288:18:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7124,
                  "src": "3280:26:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6941,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3280:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3179:133:14"
            },
            "returnParameters": {
              "id": 6946,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6945,
                  "mutability": "mutable",
                  "name": "amountOut",
                  "nameLocation": "3339:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7124,
                  "src": "3331:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6944,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3331:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3330:19:14"
            },
            "scope": 7533,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 7321,
            "nodeType": "FunctionDefinition",
            "src": "5203:1565:14",
            "body": {
              "id": 7320,
              "nodeType": "Block",
              "src": "5378:1390:14",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 7140,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 7138,
                      "name": "amountA",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7131,
                      "src": "5392:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "hexValue": "32303030",
                      "id": 7139,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5402:4:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2000_by_1",
                        "typeString": "int_const 2000"
                      },
                      "value": "2000"
                    },
                    "src": "5392:14:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 7144,
                  "nodeType": "IfStatement",
                  "src": "5388:48:14",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 7141,
                        "name": "InsufficientAAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6733,
                        "src": "5415:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 7142,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5415:21:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 7143,
                    "nodeType": "RevertStatement",
                    "src": "5408:28:14"
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 7157,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 7149,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "5474:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 7150,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "5474:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "id": 7153,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "5494:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                "typeString": "contract OpenMevZapper"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                                "typeString": "contract OpenMevZapper"
                              }
                            ],
                            "id": 7152,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5486:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 7151,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5486:7:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 7154,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5486:13:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "id": 7146,
                              "name": "tokenA",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7127,
                              "src": "5456:6:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 7145,
                            "name": "ERC20",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 435,
                            "src": "5450:5:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                              "typeString": "type(contract ERC20)"
                            }
                          },
                          "id": 7147,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5450:13:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ERC20_$435",
                            "typeString": "contract ERC20"
                          }
                        },
                        "id": 7148,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "allowance",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 133,
                        "src": "5450:23:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                          "typeString": "function (address,address) view external returns (uint256)"
                        }
                      },
                      "id": 7155,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5450:50:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 7156,
                      "name": "amountA",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7131,
                      "src": "5503:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5450:60:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 7161,
                  "nodeType": "IfStatement",
                  "src": "5446:96:14",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 7158,
                        "name": "InsufficientAllowance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6735,
                        "src": "5519:21:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 7159,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5519:23:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 7160,
                    "nodeType": "RevertStatement",
                    "src": "5512:30:14"
                  }
                },
                {
                  "assignments": [
                    7163
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7163,
                      "mutability": "mutable",
                      "name": "pair",
                      "nameLocation": "5560:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7320,
                      "src": "5552:12:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 7162,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5552:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7171,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 7166,
                          "name": "OpenMevLibrary",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3158,
                          "src": "5590:14:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_OpenMevLibrary_$3158_$",
                            "typeString": "type(library OpenMevLibrary)"
                          }
                        },
                        "id": 7167,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "SUSHI_FACTORY",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1799,
                        "src": "5590:28:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7168,
                        "name": "tokenA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7127,
                        "src": "5620:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7169,
                        "name": "tokenB",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7129,
                        "src": "5628:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 7164,
                        "name": "OpenMevLibrary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3158,
                        "src": "5567:14:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_OpenMevLibrary_$3158_$",
                          "typeString": "type(library OpenMevLibrary)"
                        }
                      },
                      "id": 7165,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "pairFor",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1906,
                      "src": "5567:22:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_address_$returns$_t_address_$",
                        "typeString": "function (address,address,address) pure returns (address)"
                      }
                    },
                    "id": 7170,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5567:68:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5552:83:14"
                },
                {
                  "assignments": [
                    7173,
                    7175,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7173,
                      "mutability": "mutable",
                      "name": "reserve0",
                      "nameLocation": "5654:8:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7320,
                      "src": "5646:16:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7172,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5646:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 7175,
                      "mutability": "mutable",
                      "name": "reserve1",
                      "nameLocation": "5672:8:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7320,
                      "src": "5664:16:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7174,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5664:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 7181,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "id": 7177,
                            "name": "pair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7163,
                            "src": "5701:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 7176,
                          "name": "IUniswapV2Pair",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1350,
                          "src": "5686:14:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IUniswapV2Pair_$1350_$",
                            "typeString": "type(contract IUniswapV2Pair)"
                          }
                        },
                        "id": 7178,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5686:20:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IUniswapV2Pair_$1350",
                          "typeString": "contract IUniswapV2Pair"
                        }
                      },
                      "id": 7179,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getReserves",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1292,
                      "src": "5686:32:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint112_$_t_uint112_$_t_uint32_$",
                        "typeString": "function () view external returns (uint112,uint112,uint32)"
                      }
                    },
                    "id": 7180,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5686:34:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint112_$_t_uint112_$_t_uint32_$",
                      "typeString": "tuple(uint112,uint112,uint32)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5645:75:14"
                },
                {
                  "assignments": [
                    7183
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7183,
                      "mutability": "mutable",
                      "name": "swapAmountIn",
                      "nameLocation": "5738:12:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7320,
                      "src": "5730:20:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7182,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5730:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7184,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5730:20:14"
                },
                {
                  "assignments": [
                    7186
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7186,
                      "mutability": "mutable",
                      "name": "swapAmountOut",
                      "nameLocation": "5768:13:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7320,
                      "src": "5760:21:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7185,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5760:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7187,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5760:21:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 7190,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 7188,
                      "name": "tokenA",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7127,
                      "src": "5796:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 7189,
                      "name": "tokenB",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7129,
                      "src": "5805:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5796:15:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 7224,
                    "nodeType": "Block",
                    "src": "5983:164:14",
                    "statements": [
                      {
                        "expression": {
                          "id": 7213,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 7208,
                            "name": "swapAmountIn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7183,
                            "src": "5997:12:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 7210,
                                "name": "amountA",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7131,
                                "src": "6027:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7211,
                                "name": "reserve1",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7175,
                                "src": "6036:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 7209,
                              "name": "_getSwapAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7532,
                              "src": "6012:14:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 7212,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6012:33:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5997:48:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 7214,
                        "nodeType": "ExpressionStatement",
                        "src": "5997:48:14"
                      },
                      {
                        "expression": {
                          "id": 7222,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 7215,
                            "name": "swapAmountOut",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7186,
                            "src": "6059:13:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 7218,
                                "name": "swapAmountIn",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7183,
                                "src": "6103:12:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7219,
                                "name": "reserve1",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7175,
                                "src": "6117:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7220,
                                "name": "reserve0",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7173,
                                "src": "6127:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 7216,
                                "name": "OpenMevLibrary",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3158,
                                "src": "6075:14:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_OpenMevLibrary_$3158_$",
                                  "typeString": "type(library OpenMevLibrary)"
                                }
                              },
                              "id": 7217,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "getAmountOut",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2095,
                              "src": "6075:27:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 7221,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6075:61:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6059:77:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 7223,
                        "nodeType": "ExpressionStatement",
                        "src": "6059:77:14"
                      }
                    ]
                  },
                  "id": 7225,
                  "nodeType": "IfStatement",
                  "src": "5792:355:14",
                  "trueBody": {
                    "id": 7207,
                    "nodeType": "Block",
                    "src": "5813:164:14",
                    "statements": [
                      {
                        "expression": {
                          "id": 7196,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 7191,
                            "name": "swapAmountIn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7183,
                            "src": "5827:12:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 7193,
                                "name": "amountA",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7131,
                                "src": "5857:7:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7194,
                                "name": "reserve0",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7173,
                                "src": "5866:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 7192,
                              "name": "_getSwapAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7532,
                              "src": "5842:14:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 7195,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5842:33:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5827:48:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 7197,
                        "nodeType": "ExpressionStatement",
                        "src": "5827:48:14"
                      },
                      {
                        "expression": {
                          "id": 7205,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 7198,
                            "name": "swapAmountOut",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7186,
                            "src": "5889:13:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 7201,
                                "name": "swapAmountIn",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7183,
                                "src": "5933:12:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7202,
                                "name": "reserve0",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7173,
                                "src": "5947:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7203,
                                "name": "reserve1",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7175,
                                "src": "5957:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 7199,
                                "name": "OpenMevLibrary",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3158,
                                "src": "5905:14:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_OpenMevLibrary_$3158_$",
                                  "typeString": "type(library OpenMevLibrary)"
                                }
                              },
                              "id": 7200,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "getAmountOut",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2095,
                              "src": "5905:27:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 7204,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5905:61:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5889:77:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 7206,
                        "nodeType": "ExpressionStatement",
                        "src": "5889:77:14"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 7228,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 7226,
                      "name": "swapAmountOut",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7186,
                      "src": "6161:13:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 7227,
                      "name": "amountBMin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7133,
                      "src": "6177:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6161:26:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 7232,
                  "nodeType": "IfStatement",
                  "src": "6157:65:14",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 7229,
                        "name": "InsufficientOutputAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6739,
                        "src": "6196:24:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 7230,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6196:26:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 7231,
                    "nodeType": "RevertStatement",
                    "src": "6189:33:14"
                  }
                },
                {
                  "assignments": [
                    7237
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7237,
                      "mutability": "mutable",
                      "name": "path",
                      "nameLocation": "6249:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7320,
                      "src": "6232:21:14",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 7235,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6232:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 7236,
                        "nodeType": "ArrayTypeName",
                        "src": "6232:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7243,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "32",
                        "id": 7241,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6270:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        }
                      ],
                      "id": 7240,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "6256:13:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (address[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 7238,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6260:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 7239,
                        "nodeType": "ArrayTypeName",
                        "src": "6260:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      }
                    },
                    "id": 7242,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6256:16:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6232:40:14"
                },
                {
                  "expression": {
                    "id": 7248,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 7244,
                        "name": "path",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7237,
                        "src": "6282:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 7246,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 7245,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6287:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6282:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 7247,
                      "name": "tokenA",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7127,
                      "src": "6292:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6282:16:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 7249,
                  "nodeType": "ExpressionStatement",
                  "src": "6282:16:14"
                },
                {
                  "expression": {
                    "id": 7254,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 7250,
                        "name": "path",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7237,
                        "src": "6308:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 7252,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 7251,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6313:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6308:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 7253,
                      "name": "tokenB",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7129,
                      "src": "6318:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6308:16:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 7255,
                  "nodeType": "ExpressionStatement",
                  "src": "6308:16:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 7260,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6365:3:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 7261,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "6365:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 7264,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "6385:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          ],
                          "id": 7263,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6377:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 7262,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6377:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 7265,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6377:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7266,
                        "name": "amountA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7131,
                        "src": "6392:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 7257,
                            "name": "tokenA",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7127,
                            "src": "6340:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 7256,
                          "name": "ERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 435,
                          "src": "6334:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                            "typeString": "type(contract ERC20)"
                          }
                        },
                        "id": 7258,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6334:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$435",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 7259,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7577,
                      "src": "6334:30:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$435_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$435_$",
                        "typeString": "function (contract ERC20,address,address,uint256)"
                      }
                    },
                    "id": 7267,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6334:66:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7268,
                  "nodeType": "ExpressionStatement",
                  "src": "6334:66:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7270,
                        "name": "tokenA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7127,
                        "src": "6432:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 7273,
                            "name": "router",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6745,
                            "src": "6448:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                              "typeString": "contract IOpenMevRouter"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                              "typeString": "contract IOpenMevRouter"
                            }
                          ],
                          "id": 7272,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6440:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 7271,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6440:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 7274,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6440:15:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7275,
                        "name": "swapAmountIn",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7183,
                        "src": "6457:12:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 7269,
                      "name": "_approveTokenIfNeeded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6805,
                      "src": "6410:21:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 7276,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6410:60:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7277,
                  "nodeType": "ExpressionStatement",
                  "src": "6410:60:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7281,
                        "name": "swapAmountIn",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7183,
                        "src": "6512:12:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 7282,
                        "name": "swapAmountOut",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7186,
                        "src": "6526:13:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 7283,
                        "name": "path",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7237,
                        "src": "6541:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 7286,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "6555:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          ],
                          "id": 7285,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6547:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 7284,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6547:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 7287,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6547:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 7288,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "6562:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 7289,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "6562:15:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 7278,
                        "name": "router",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6745,
                        "src": "6480:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                          "typeString": "contract IOpenMevRouter"
                        }
                      },
                      "id": 7280,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "swapExactTokensForTokens",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 805,
                      "src": "6480:31:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                        "typeString": "function (uint256,uint256,address[] memory,address,uint256) external returns (uint256[] memory)"
                      }
                    },
                    "id": 7290,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6480:98:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "id": 7291,
                  "nodeType": "ExpressionStatement",
                  "src": "6480:98:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7296,
                        "name": "pair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7163,
                        "src": "6616:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 7299,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 7297,
                          "name": "amountA",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7131,
                          "src": "6622:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "id": 7298,
                          "name": "swapAmountIn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7183,
                          "src": "6632:12:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6622:22:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 7293,
                            "name": "tokenA",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7127,
                            "src": "6595:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 7292,
                          "name": "ERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 435,
                          "src": "6589:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                            "typeString": "type(contract ERC20)"
                          }
                        },
                        "id": 7294,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6589:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$435",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 7295,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7597,
                      "src": "6589:26:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$435_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$435_$",
                        "typeString": "function (contract ERC20,address,uint256)"
                      }
                    },
                    "id": 7300,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6589:56:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7301,
                  "nodeType": "ExpressionStatement",
                  "src": "6589:56:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7306,
                        "name": "pair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7163,
                        "src": "6682:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7307,
                        "name": "swapAmountOut",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7186,
                        "src": "6688:13:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 7303,
                            "name": "tokenB",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7129,
                            "src": "6661:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 7302,
                          "name": "ERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 435,
                          "src": "6655:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                            "typeString": "type(contract ERC20)"
                          }
                        },
                        "id": 7304,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6655:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$435",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 7305,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7597,
                      "src": "6655:26:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$435_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$435_$",
                        "typeString": "function (contract ERC20,address,uint256)"
                      }
                    },
                    "id": 7308,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6655:47:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7309,
                  "nodeType": "ExpressionStatement",
                  "src": "6655:47:14"
                },
                {
                  "expression": {
                    "id": 7318,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7310,
                      "name": "liquidity",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7136,
                      "src": "6712:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 7315,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6750:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 7316,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "6750:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "id": 7312,
                              "name": "pair",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7163,
                              "src": "6739:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 7311,
                            "name": "IUniswapV2Pair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1350,
                            "src": "6724:14:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IUniswapV2Pair_$1350_$",
                              "typeString": "type(contract IUniswapV2Pair)"
                            }
                          },
                          "id": 7313,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6724:20:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IUniswapV2Pair_$1350",
                            "typeString": "contract IUniswapV2Pair"
                          }
                        },
                        "id": 7314,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "mint",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1314,
                        "src": "6724:25:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_uint256_$",
                          "typeString": "function (address) external returns (uint256)"
                        }
                      },
                      "id": 7317,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6724:37:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6712:49:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 7319,
                  "nodeType": "ExpressionStatement",
                  "src": "6712:49:14"
                }
              ]
            },
            "documentation": {
              "id": 7125,
              "nodeType": "StructuredDocumentation",
              "src": "4712:486:14",
              "text": "@notice Adds liquidity to an ERC-20⇄ERC-20 pool from a single token. msg.sender should have already given the router an allowance of at least amountA on tokenA\n @param tokenA Token in pool\n @param tokenB Token in pool\n @param amountA Amount of token A desired to add to pool, inclusive of swap half to tokenB\n @param amountBMin Minimum amount of token B on swap, can be 0\n @return liquidity amount of liquidity token received, sent to msg.sender"
            },
            "functionSelector": "64551df3",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "swapAndStakeLiquidity",
            "nameLocation": "5212:21:14",
            "parameters": {
              "id": 7134,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7127,
                  "mutability": "mutable",
                  "name": "tokenA",
                  "nameLocation": "5251:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7321,
                  "src": "5243:14:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7126,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5243:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7129,
                  "mutability": "mutable",
                  "name": "tokenB",
                  "nameLocation": "5275:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7321,
                  "src": "5267:14:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7128,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5267:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7131,
                  "mutability": "mutable",
                  "name": "amountA",
                  "nameLocation": "5299:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7321,
                  "src": "5291:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7130,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5291:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7133,
                  "mutability": "mutable",
                  "name": "amountBMin",
                  "nameLocation": "5324:10:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7321,
                  "src": "5316:18:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7132,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5316:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5233:107:14"
            },
            "returnParameters": {
              "id": 7137,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7136,
                  "mutability": "mutable",
                  "name": "liquidity",
                  "nameLocation": "5367:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7321,
                  "src": "5359:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7135,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5359:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5358:19:14"
            },
            "scope": 7533,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 7501,
            "nodeType": "FunctionDefinition",
            "src": "7121:1411:14",
            "body": {
              "id": 7500,
              "nodeType": "Block",
              "src": "7236:1296:14",
              "statements": [
                {
                  "assignments": [
                    7332
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7332,
                      "mutability": "mutable",
                      "name": "WETH9",
                      "nameLocation": "7254:5:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7500,
                      "src": "7246:13:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 7331,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7246:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7334,
                  "initialValue": {
                    "id": 7333,
                    "name": "WETH09",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 6742,
                    "src": "7262:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7246:22:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 7338,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 7335,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "7282:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 7336,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "7282:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "hexValue": "32303030",
                      "id": 7337,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7294:4:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2000_by_1",
                        "typeString": "int_const 2000"
                      },
                      "value": "2000"
                    },
                    "src": "7282:16:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 7342,
                  "nodeType": "IfStatement",
                  "src": "7278:50:14",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 7339,
                        "name": "InsufficientAAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6733,
                        "src": "7307:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 7340,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7307:21:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 7341,
                    "nodeType": "RevertStatement",
                    "src": "7300:28:14"
                  }
                },
                {
                  "assignments": [
                    7344
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7344,
                      "mutability": "mutable",
                      "name": "pair",
                      "nameLocation": "7346:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7500,
                      "src": "7338:12:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 7343,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7338:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7352,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 7347,
                          "name": "OpenMevLibrary",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3158,
                          "src": "7376:14:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_OpenMevLibrary_$3158_$",
                            "typeString": "type(library OpenMevLibrary)"
                          }
                        },
                        "id": 7348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "SUSHI_FACTORY",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1799,
                        "src": "7376:28:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7349,
                        "name": "WETH9",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7332,
                        "src": "7406:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7350,
                        "name": "tokenB",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7324,
                        "src": "7413:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 7345,
                        "name": "OpenMevLibrary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3158,
                        "src": "7353:14:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_OpenMevLibrary_$3158_$",
                          "typeString": "type(library OpenMevLibrary)"
                        }
                      },
                      "id": 7346,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "pairFor",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1906,
                      "src": "7353:22:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_address_$returns$_t_address_$",
                        "typeString": "function (address,address,address) pure returns (address)"
                      }
                    },
                    "id": 7351,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7353:67:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7338:82:14"
                },
                {
                  "assignments": [
                    7354,
                    7356,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7354,
                      "mutability": "mutable",
                      "name": "reserve0",
                      "nameLocation": "7439:8:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7500,
                      "src": "7431:16:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7353,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7431:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 7356,
                      "mutability": "mutable",
                      "name": "reserve1",
                      "nameLocation": "7457:8:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7500,
                      "src": "7449:16:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7355,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7449:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 7362,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "id": 7358,
                            "name": "pair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7344,
                            "src": "7486:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 7357,
                          "name": "IUniswapV2Pair",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1350,
                          "src": "7471:14:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IUniswapV2Pair_$1350_$",
                            "typeString": "type(contract IUniswapV2Pair)"
                          }
                        },
                        "id": 7359,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7471:20:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IUniswapV2Pair_$1350",
                          "typeString": "contract IUniswapV2Pair"
                        }
                      },
                      "id": 7360,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getReserves",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1292,
                      "src": "7471:32:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint112_$_t_uint112_$_t_uint32_$",
                        "typeString": "function () view external returns (uint112,uint112,uint32)"
                      }
                    },
                    "id": 7361,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7471:34:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint112_$_t_uint112_$_t_uint32_$",
                      "typeString": "tuple(uint112,uint112,uint32)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7430:75:14"
                },
                {
                  "assignments": [
                    7364
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7364,
                      "mutability": "mutable",
                      "name": "swapAmountIn",
                      "nameLocation": "7523:12:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7500,
                      "src": "7515:20:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7363,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7515:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7365,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7515:20:14"
                },
                {
                  "assignments": [
                    7367
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7367,
                      "mutability": "mutable",
                      "name": "swapAmountOut",
                      "nameLocation": "7553:13:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7500,
                      "src": "7545:21:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7366,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7545:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7368,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7545:21:14"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 7371,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 7369,
                      "name": "WETH9",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7332,
                      "src": "7581:5:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 7370,
                      "name": "tokenB",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7324,
                      "src": "7589:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7581:14:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 7407,
                    "nodeType": "Block",
                    "src": "7769:166:14",
                    "statements": [
                      {
                        "expression": {
                          "id": 7396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 7390,
                            "name": "swapAmountIn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7364,
                            "src": "7783:12:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 7392,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "7813:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 7393,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "7813:9:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7394,
                                "name": "reserve1",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7356,
                                "src": "7824:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 7391,
                              "name": "_getSwapAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7532,
                              "src": "7798:14:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 7395,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7798:35:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7783:50:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 7397,
                        "nodeType": "ExpressionStatement",
                        "src": "7783:50:14"
                      },
                      {
                        "expression": {
                          "id": 7405,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 7398,
                            "name": "swapAmountOut",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7367,
                            "src": "7847:13:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 7401,
                                "name": "swapAmountIn",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7364,
                                "src": "7891:12:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7402,
                                "name": "reserve1",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7356,
                                "src": "7905:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7403,
                                "name": "reserve0",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7354,
                                "src": "7915:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 7399,
                                "name": "OpenMevLibrary",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3158,
                                "src": "7863:14:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_OpenMevLibrary_$3158_$",
                                  "typeString": "type(library OpenMevLibrary)"
                                }
                              },
                              "id": 7400,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "getAmountOut",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2095,
                              "src": "7863:27:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 7404,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7863:61:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7847:77:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 7406,
                        "nodeType": "ExpressionStatement",
                        "src": "7847:77:14"
                      }
                    ]
                  },
                  "id": 7408,
                  "nodeType": "IfStatement",
                  "src": "7577:358:14",
                  "trueBody": {
                    "id": 7389,
                    "nodeType": "Block",
                    "src": "7597:166:14",
                    "statements": [
                      {
                        "expression": {
                          "id": 7378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 7372,
                            "name": "swapAmountIn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7364,
                            "src": "7611:12:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 7374,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "7641:3:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 7375,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "7641:9:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7376,
                                "name": "reserve0",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7354,
                                "src": "7652:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 7373,
                              "name": "_getSwapAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7532,
                              "src": "7626:14:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 7377,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7626:35:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7611:50:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 7379,
                        "nodeType": "ExpressionStatement",
                        "src": "7611:50:14"
                      },
                      {
                        "expression": {
                          "id": 7387,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 7380,
                            "name": "swapAmountOut",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7367,
                            "src": "7675:13:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 7383,
                                "name": "swapAmountIn",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7364,
                                "src": "7719:12:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7384,
                                "name": "reserve0",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7354,
                                "src": "7733:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 7385,
                                "name": "reserve1",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7356,
                                "src": "7743:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 7381,
                                "name": "OpenMevLibrary",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3158,
                                "src": "7691:14:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_OpenMevLibrary_$3158_$",
                                  "typeString": "type(library OpenMevLibrary)"
                                }
                              },
                              "id": 7382,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "getAmountOut",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2095,
                              "src": "7691:27:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 7386,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7691:61:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7675:77:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 7388,
                        "nodeType": "ExpressionStatement",
                        "src": "7675:77:14"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 7411,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 7409,
                      "name": "swapAmountOut",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7367,
                      "src": "7949:13:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 7410,
                      "name": "amountBMin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7326,
                      "src": "7965:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7949:26:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 7415,
                  "nodeType": "IfStatement",
                  "src": "7945:65:14",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 7412,
                        "name": "InsufficientOutputAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6739,
                        "src": "7984:24:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 7413,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7984:26:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 7414,
                    "nodeType": "RevertStatement",
                    "src": "7977:33:14"
                  }
                },
                {
                  "assignments": [
                    7420
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7420,
                      "mutability": "mutable",
                      "name": "path",
                      "nameLocation": "8037:4:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 7500,
                      "src": "8020:21:14",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 7418,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8020:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 7419,
                        "nodeType": "ArrayTypeName",
                        "src": "8020:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 7426,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "32",
                        "id": 7424,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8058:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        }
                      ],
                      "id": 7423,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "8044:13:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (address[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 7421,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8048:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 7422,
                        "nodeType": "ArrayTypeName",
                        "src": "8048:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      }
                    },
                    "id": 7425,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8044:16:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8020:40:14"
                },
                {
                  "expression": {
                    "id": 7431,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 7427,
                        "name": "path",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7420,
                        "src": "8070:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 7429,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 7428,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8075:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8070:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 7430,
                      "name": "WETH9",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7332,
                      "src": "8080:5:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "8070:15:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 7432,
                  "nodeType": "ExpressionStatement",
                  "src": "8070:15:14"
                },
                {
                  "expression": {
                    "id": 7437,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 7433,
                        "name": "path",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7420,
                        "src": "8095:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 7435,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 7434,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8100:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8095:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 7436,
                      "name": "tokenB",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7324,
                      "src": "8105:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "8095:16:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 7438,
                  "nodeType": "ExpressionStatement",
                  "src": "8095:16:14"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "arguments": [
                            {
                              "id": 7440,
                              "name": "WETH9",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7332,
                              "src": "8128:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 7439,
                            "name": "IWETH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1763,
                            "src": "8122:5:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IWETH_$1763_$",
                              "typeString": "type(contract IWETH)"
                            }
                          },
                          "id": 7441,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8122:12:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IWETH_$1763",
                            "typeString": "contract IWETH"
                          }
                        },
                        "id": 7442,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "deposit",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1748,
                        "src": "8122:20:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$__$returns$__$",
                          "typeString": "function () payable external"
                        }
                      },
                      "id": 7445,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "expression": {
                            "id": 7443,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "8151:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 7444,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "8151:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "8122:40:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$__$returns$__$value",
                        "typeString": "function () payable external"
                      }
                    },
                    "id": 7446,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8122:42:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7447,
                  "nodeType": "ExpressionStatement",
                  "src": "8122:42:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7449,
                        "name": "WETH9",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7332,
                        "src": "8196:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 7452,
                            "name": "router",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6745,
                            "src": "8211:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                              "typeString": "contract IOpenMevRouter"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                              "typeString": "contract IOpenMevRouter"
                            }
                          ],
                          "id": 7451,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8203:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 7450,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8203:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 7453,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8203:15:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7454,
                        "name": "swapAmountIn",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7364,
                        "src": "8220:12:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 7448,
                      "name": "_approveTokenIfNeeded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6805,
                      "src": "8174:21:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 7455,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8174:59:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7456,
                  "nodeType": "ExpressionStatement",
                  "src": "8174:59:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7460,
                        "name": "swapAmountIn",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7364,
                        "src": "8275:12:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 7461,
                        "name": "swapAmountOut",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7367,
                        "src": "8289:13:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 7462,
                        "name": "path",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7420,
                        "src": "8304:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 7465,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "8318:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_OpenMevZapper_$7533",
                              "typeString": "contract OpenMevZapper"
                            }
                          ],
                          "id": 7464,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8310:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 7463,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8310:7:14",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 7466,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8310:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 7467,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "8325:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 7468,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "8325:15:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 7457,
                        "name": "router",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6745,
                        "src": "8243:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IOpenMevRouter_$1035",
                          "typeString": "contract IOpenMevRouter"
                        }
                      },
                      "id": 7459,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "swapExactTokensForTokens",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 805,
                      "src": "8243:31:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                        "typeString": "function (uint256,uint256,address[] memory,address,uint256) external returns (uint256[] memory)"
                      }
                    },
                    "id": 7469,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8243:98:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "id": 7470,
                  "nodeType": "ExpressionStatement",
                  "src": "8243:98:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7475,
                        "name": "pair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7344,
                        "src": "8378:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 7479,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 7476,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "8384:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 7477,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "8384:9:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "id": 7478,
                          "name": "swapAmountIn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7364,
                          "src": "8396:12:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8384:24:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 7472,
                            "name": "WETH9",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7332,
                            "src": "8358:5:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 7471,
                          "name": "ERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 435,
                          "src": "8352:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                            "typeString": "type(contract ERC20)"
                          }
                        },
                        "id": 7473,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8352:12:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$435",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 7474,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7597,
                      "src": "8352:25:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$435_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$435_$",
                        "typeString": "function (contract ERC20,address,uint256)"
                      }
                    },
                    "id": 7480,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8352:57:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7481,
                  "nodeType": "ExpressionStatement",
                  "src": "8352:57:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7486,
                        "name": "pair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7344,
                        "src": "8446:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7487,
                        "name": "swapAmountOut",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7367,
                        "src": "8452:13:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 7483,
                            "name": "tokenB",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7324,
                            "src": "8425:6:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 7482,
                          "name": "ERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 435,
                          "src": "8419:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ERC20_$435_$",
                            "typeString": "type(contract ERC20)"
                          }
                        },
                        "id": 7484,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8419:13:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$435",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 7485,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7597,
                      "src": "8419:26:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$435_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$435_$",
                        "typeString": "function (contract ERC20,address,uint256)"
                      }
                    },
                    "id": 7488,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8419:47:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7489,
                  "nodeType": "ExpressionStatement",
                  "src": "8419:47:14"
                },
                {
                  "expression": {
                    "id": 7498,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7490,
                      "name": "liquidity",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7329,
                      "src": "8476:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 7495,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "8514:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 7496,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "8514:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "id": 7492,
                              "name": "pair",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7344,
                              "src": "8503:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 7491,
                            "name": "IUniswapV2Pair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1350,
                            "src": "8488:14:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IUniswapV2Pair_$1350_$",
                              "typeString": "type(contract IUniswapV2Pair)"
                            }
                          },
                          "id": 7493,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8488:20:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IUniswapV2Pair_$1350",
                            "typeString": "contract IUniswapV2Pair"
                          }
                        },
                        "id": 7494,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "mint",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1314,
                        "src": "8488:25:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_uint256_$",
                          "typeString": "function (address) external returns (uint256)"
                        }
                      },
                      "id": 7497,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8488:37:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8476:49:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 7499,
                  "nodeType": "ExpressionStatement",
                  "src": "8476:49:14"
                }
              ]
            },
            "documentation": {
              "id": 7322,
              "nodeType": "StructuredDocumentation",
              "src": "6774:342:14",
              "text": "@notice Adds liquidity to an ERC-20⇄ERC-20 pool from eth. msg.value is treated as a amountETHDesired. Leftover ETH, if any, is returned to msg.sender\n @param tokenB Token in pool\n @param amountBMin Minimum amount of token B on swap, can be 0\n @return liquidity amount of liquidity token received, sent to msg.sender"
            },
            "functionSelector": "942f0c27",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "swapETHAndStakeLiquidity",
            "nameLocation": "7130:24:14",
            "parameters": {
              "id": 7327,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7324,
                  "mutability": "mutable",
                  "name": "tokenB",
                  "nameLocation": "7163:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7501,
                  "src": "7155:14:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7323,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7155:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7326,
                  "mutability": "mutable",
                  "name": "amountBMin",
                  "nameLocation": "7179:10:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7501,
                  "src": "7171:18:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7325,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7171:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7154:36:14"
            },
            "returnParameters": {
              "id": 7330,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7329,
                  "mutability": "mutable",
                  "name": "liquidity",
                  "nameLocation": "7225:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7501,
                  "src": "7217:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7328,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7217:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7216:19:14"
            },
            "scope": 7533,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 7532,
            "nodeType": "FunctionDefinition",
            "src": "8538:212:14",
            "body": {
              "id": 7531,
              "nodeType": "Block",
              "src": "8629:121:14",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 7529,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 7526,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 7521,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 7512,
                                  "name": "reserveIn",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 7505,
                                  "src": "8663:9:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 7519,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 7515,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 7513,
                                          "name": "userIn",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 7503,
                                          "src": "8676:6:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "hexValue": "33393838303030",
                                          "id": 7514,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "8685:7:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_3988000_by_1",
                                            "typeString": "int_const 3988000"
                                          },
                                          "value": "3988000"
                                        },
                                        "src": "8676:16:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 7518,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 7516,
                                          "name": "reserveIn",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 7505,
                                          "src": "8695:9:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "hexValue": "33393838303039",
                                          "id": 7517,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "8707:7:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_3988009_by_1",
                                            "typeString": "int_const 3988009"
                                          },
                                          "value": "3988009"
                                        },
                                        "src": "8695:19:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "8676:38:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 7520,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "8675:40:14",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "8663:52:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 7510,
                                "name": "Babylonian",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 57,
                                "src": "8647:10:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Babylonian_$57_$",
                                  "typeString": "type(library Babylonian)"
                                }
                              },
                              "id": 7511,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sqrt",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 56,
                              "src": "8647:15:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256) pure returns (uint256)"
                              }
                            },
                            "id": 7522,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8647:69:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 7525,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 7523,
                              "name": "reserveIn",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7505,
                              "src": "8719:9:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "hexValue": "31393937",
                              "id": 7524,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8731:4:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1997_by_1",
                                "typeString": "int_const 1997"
                              },
                              "value": "1997"
                            },
                            "src": "8719:16:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8647:88:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 7527,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "8646:90:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "31393934",
                      "id": 7528,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8739:4:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1994_by_1",
                        "typeString": "int_const 1994"
                      },
                      "value": "1994"
                    },
                    "src": "8646:97:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 7509,
                  "id": 7530,
                  "nodeType": "Return",
                  "src": "8639:104:14"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getSwapAmount",
            "nameLocation": "8547:14:14",
            "parameters": {
              "id": 7506,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7503,
                  "mutability": "mutable",
                  "name": "userIn",
                  "nameLocation": "8570:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7532,
                  "src": "8562:14:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7502,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8562:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7505,
                  "mutability": "mutable",
                  "name": "reserveIn",
                  "nameLocation": "8586:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 7532,
                  "src": "8578:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7504,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8578:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8561:35:14"
            },
            "returnParameters": {
              "id": 7509,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7508,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7532,
                  "src": "8620:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7507,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8620:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8619:9:14"
            },
            "scope": 7533,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "OpenMevZapper",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 6721,
          "nodeType": "StructuredDocumentation",
          "src": "289:149:14",
          "text": "@title OpenMevZapper\n @notice Optimal UniswapV2Pair Liquidity deposits and withdrawls with a single token / eth (or relevant native currency)"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          7533
        ],
        "name": "OpenMevZapper",
        "nameLocation": "447:13:14",
        "scope": 7534,
        "usedErrors": [
          1771,
          1773,
          1777,
          1779,
          1781,
          6727,
          6729,
          6731,
          6733,
          6735,
          6737,
          6739
        ]
      }
    ],
    "license": "UNLICENSED"
  },
  "id": 14
}