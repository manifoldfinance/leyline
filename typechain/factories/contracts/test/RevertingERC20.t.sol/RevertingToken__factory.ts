/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  RevertingToken,
  RevertingTokenInterface,
} from "../../../../contracts/test/RevertingERC20.t.sol/RevertingToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506000196000818155338152600160205260409020556103d8806100356000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063313ce5671161007657806395d89b411161005b57806395d89b4114610163578063a9059cbb146100fa578063dd62ed3e1461019f57600080fd5b8063313ce5671461012e57806370a082311461014357600080fd5b806306fdde03146100a8578063095ea7b3146100fa57806318160ddd1461010a57806323b872dd14610120575b600080fd5b6100e46040518060400160405280600e81526020017f526576657274696e67546f6b656e00000000000000000000000000000000000081525081565b6040516100f1919061024a565b60405180910390f35b6101086100a33660046102b5565b005b61011360005481565b6040516100f191906102fa565b6101086100a3366004610308565b610136601281565b6040516100f19190610361565b61011361015136600461036f565b60016020526000908152604090205481565b6100e46040518060400160405280600281526020017f525400000000000000000000000000000000000000000000000000000000000081525081565b6101136101ad366004610398565b600260209081526000928352604080842090915290825290205481565b60005b838110156101e55781810151838201526020016101cd565b838111156101f4576000848401525b50505050565b6000610204825190565b80845260208401935061021b8185602086016101ca565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b6020808252810161025b81846101fa565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82165b92915050565b61028b81610262565b811461029657600080fd5b50565b803561027c81610282565b8061028b565b803561027c816102a4565b600080604083850312156102cb576102cb600080fd5b60006102d78585610299565b92505060206102e8858286016102aa565b9150509250929050565b805b82525050565b6020810161027c82846102f2565b60008060006060848603121561032057610320600080fd5b600061032c8686610299565b935050602061033d86828701610299565b925050604061034e868287016102aa565b9150509250925092565b60ff81166102f4565b6020810161027c8284610358565b60006020828403121561038457610384600080fd5b60006103908484610299565b949350505050565b600080604083850312156103ae576103ae600080fd5b60006103ba8585610299565b92505060206102e88582860161029956fea164736f6c634300080d000a";

type RevertingTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RevertingTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RevertingToken__factory extends ContractFactory {
  constructor(...args: RevertingTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RevertingToken> {
    return super.deploy(overrides || {}) as Promise<RevertingToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RevertingToken {
    return super.attach(address) as RevertingToken;
  }
  override connect(signer: Signer): RevertingToken__factory {
    return super.connect(signer) as RevertingToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RevertingTokenInterface {
    return new utils.Interface(_abi) as RevertingTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RevertingToken {
    return new Contract(address, _abi, signerOrProvider) as RevertingToken;
  }
}
